--- Directory Tree Structure ---
```
|-- .vscode
|-- node_modules
|-- output
|-- src
|   |-- campaigns
|   |   |-- MyCampaign
|   |   |   |-- about
|   |   |   |-- characters
|   |   |   |-- custom
|   |   |   |-- maps
|   |   |   |-- npcs
|   |   |   |-- organizations
|   |   |   |-- quests
|   |-- content
|   |   |-- classes
|   |   |-- deities
|   |   |-- domains
|   |   |-- feats
|   |   |-- items
|   |   |-- languages
|   |   |-- magic_properties
|   |   |-- prefabs
|   |   |   |-- items
|   |   |   |-- monsters
|   |   |   |-- npcs
|   |   |-- races
|   |   |-- skills
|   |   |-- spells
|   |   |-- templates
|   |-- resources
|   |-- scripts
|   |   |-- data
|   |   |-- engine
|   |   |   |-- entities
|   |   |-- ui
|   |-- server
|   |-- test

```
--- File List and Contents ---
```
File: D:\Projects\Game Dev\my-rpg-project\src\campaigns\MyCampaign\about\info.json
{
    "name" : "My test campaign",
    "description" : "Campaign meant for testing and stuff"
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\campaigns\MyCampaign\maps\starting_area.json
{
  "name": "Starting Area",
  "description": "The initial area of the game.",
  "tiles": [
    "############",
    "#........#",
    "#........#",
    "#.>.......#",
    "#........#",
    "#........#",
    "############"
  ],
  "tileTypes": {
    "#": "wall",
    ".": "floor",
    ">": "trigger"
  },
  "triggers": [
    {
      "symbol": ">",
      "targetMap": "town_square",
      "targetLocation": {
        "x": 5,
        "y": 2
      }
    }
  ]
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\campaigns\MyCampaign\maps\town_square.json
{
  "name": "Town Square",
  "description": "The bustling town square.",
  "tiles": [
    "#####--#####",
    "#........#",
    "#........#",
    "--.......--",
    "#........#",
    "#........#",
    "#####--#####"
  ],
  "tileTypes": {
    "#": "building",
    ".": "cobblestone",
    "-": "road"
  },
  "triggers": [
    {
      "symbol": "<",
      "targetMap": "starting_area",
      "targetLocation": {
        "x": 3,
        "y": 3
      }
    }
  ]
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\classes\cleric.json
{
  "name": "Cleric",
  "description": "A divine spellcaster, devoted to a deity and capable of channeling divine power for healing, protection, and combat.",
  "alignment_restrictions": "within one step of deity",
  "hit_die": "d8",
  "class_skills": [
    "Concentration",
    "Craft",
    "Diplomacy",
    "Heal",
    "Knowledge(arcana)",
    "Knowledge(history)",
    "Knowledge(religion)",
    "Knowledge(the planes)",
    "Profession",
    "Spellcraft"
  ],
  "skill_points_per_level": {
    "base": 2,
    "int_mod": true
  },
  "level_progression": [
    {
      "level": 1,
      "base_attack_bonus": 0,
      "fortitude_save": 1,
      "reflex_save": 0,
      "will_save": 1,
      "special": [
        {
          "name": "Turn or Rebuke Undead",
          "description": "A cleric has the power to affect undead creatures",
          "data": {
            "type": "Turn"
          }
        }
      ]
    },
    {
      "level": 2,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 0,
      "will_save": 1,
      "special": []
    },
    {
      "level": 3,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    },
    {
      "level": 4,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    },
    {
      "level": 5,
      "base_attack_bonus": 0,
      "fortitude_save": 0,
      "reflex_save": 0,
      "will_save": 0,
      "special": []
    },
    {
      "level": 6,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    },
    {
      "level": 7,
      "base_attack_bonus": 1,
      "fortitude_save": 0,
      "reflex_save": 0,
      "will_save": 0,
      "special": []
    },
    {
      "level": 8,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 0,
      "will_save": 1,
      "special": []
    },
    {
      "level": 9,
      "base_attack_bonus": 0,
      "fortitude_save": 0,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    },
    {
      "level": 10,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    },
    {
      "level": 11,
      "base_attack_bonus": 1,
      "fortitude_save": 0,
      "reflex_save": 0,
      "will_save": 0,
      "special": []
    },
    {
      "level": 12,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 0,
      "will_save": 1,
      "special": []
    },
    {
      "level": 13,
      "base_attack_bonus": 0,
      "fortitude_save": 0,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    },
    {
      "level": 14,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    },
    {
      "level": 15,
      "base_attack_bonus": 0,
      "fortitude_save": 0,
      "reflex_save": 0,
      "will_save": 0,
      "special": []
    },
    {
      "level": 16,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 0,
      "will_save": 1,
      "special": []
    },
    {
      "level": 17,
      "base_attack_bonus": 0,
      "fortitude_save": 0,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    },
    {
      "level": 18,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    },
    {
      "level": 19,
      "base_attack_bonus": 0,
      "fortitude_save": 0,
      "reflex_save": 0,
      "will_save": 0,
      "special": []
    },
    {
      "level": 20,
      "base_attack_bonus": 1,
      "fortitude_save": 1,
      "reflex_save": 1,
      "will_save": 1,
      "special": []
    }
  ],
  "spell_progression": {
    "spell_list": "Cleric Spells",
    "casting_type": "prepared",
    "spells_per_day": {
      "1": {
        "0": "3",
        "1": "1",
        "2": "-"
      },
      "2": {
        "0": "4",
        "1": "2",
        "2": "-"
      },
      "3": {
        "0": "4",
        "1": "2",
        "2": "1"
      },
      "4": {
        "0": "5",
        "1": "3",
        "2": "2",
        "3": "-"
      },
      "5": {
        "0": "5",
        "1": "3",
        "2": "2",
        "3": "1"
      },
      "6": {
        "0": "5",
        "1": "3",
        "2": "3",
        "3": "2",
        "4": "-"
      },
      "7": {
        "0": "6",
        "1": "4",
        "2": "3",
        "3": "2",
        "4": "1"
      },
      "8": {
        "0": "6",
        "1": "4",
        "2": "3",
        "3": "3",
        "4": "2"
      },
      "9": {
        "0": "6",
        "1": "4",
        "2": "4",
        "3": "3",
        "4": "2",
        "5": "1"
      },
      "10": {
        "0": "6",
        "1": "4",
        "2": "4",
        "3": "3",
        "4": "3",
        "5": "2"
      },
      "11": {
        "0": "6",
        "1": "5",
        "2": "4",
        "3": "4",
        "4": "3",
        "5": "2",
        "6": "1"
      },
      "12": {
        "0": "6",
        "1": "5",
        "2": "4",
        "3": "4",
        "4": "3",
        "5": "3",
        "6": "2"
      },
      "13": {
        "0": "6",
        "1": "5",
        "2": "5",
        "3": "4",
        "4": "4",
        "5": "3",
        "6": "2",
        "7": "1"
      },
      "14": {
        "0": "6",
        "1": "5",
        "2": "5",
        "3": "4",
        "4": "4",
        "5": "3",
        "6": "3",
        "7": "2"
      },
      "15": {
        "0": "6",
        "1": "5",
        "2": "5",
        "3": "5",
        "4": "4",
        "5": "4",
        "6": "3",
        "7": "2",
        "8": "1"
      },
      "16": {
        "0": "6",
        "1": "5",
        "2": "5",
        "3": "5",
        "4": "4",
        "5": "4",
        "6": "3",
        "7": "3",
        "8": "2"
      },
      "17": {
        "0": "6",
        "1": "5",
        "2": "5",
        "3": "5",
        "4": "5",
        "5": "4",
        "6": "4",
        "7": "3",
        "8": "2",
        "9": "1"
      },
      "18": {
        "0": "6",
        "1": "5",
        "2": "5",
        "3": "5",
        "4": "5",
        "5": "4",
        "6": "4",
        "7": "3",
        "8": "3",
        "9": "2"
      },
      "19": {
        "0": "6",
        "1": "5",
        "2": "5",
        "3": "5",
        "4": "5",
        "5": "5",
        "6": "4",
        "7": "4",
        "8": "3",
        "9": "3"
      },
      "20": {
        "0": "6",
        "1": "5",
        "2": "5",
        "3": "5",
        "4": "5",
        "5": "5",
        "6": "4",
        "7": "4",
        "8": "4",
        "9": "4"
      }
    },
    "domain_spells_per_day": {
      "1": {
        "1": "1",
        "2": "-"
      },
      "2": {
        "1": "1",
        "2": "-"
      },
      "3": {
        "1": "1",
        "2": "1"
      },
      "4": {
        "1": "1",
        "2": "1",
        "3": "-"
      },
      "5": {
        "1": "1",
        "2": "1",
        "3": "1"
      },
      "6": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "-"
      },
      "7": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1"
      },
      "8": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1"
      },
      "9": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1"
      },
      "10": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1"
      },
      "11": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1"
      },
      "12": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1"
      },
      "13": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1",
        "7": "1"
      },
      "14": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1",
        "7": "1"
      },
      "15": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1",
        "7": "1",
        "8": "1"
      },
      "16": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1",
        "7": "1",
        "8": "1"
      },
      "17": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1",
        "7": "1",
        "8": "1",
        "9": "1"
      },
      "18": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1",
        "7": "1",
        "8": "1",
        "9": "1"
      },
      "19": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1",
        "7": "1",
        "8": "1",
        "9": "1"
      },
      "20": {
        "1": "1",
        "2": "1",
        "3": "1",
        "4": "1",
        "5": "1",
        "6": "1",
        "7": "1",
        "8": "1",
        "9": "1"
      }
    }
  },
  "bonus_languages": [
    "Celestial",
    "Abyssal",
    "Infernal"
  ],
  "armor_proficiencies": [
    "light",
    "medium",
    "heavy",
    "shield"
  ],
  "weapon_proficiencies": [
    "simple"
  ]
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\feats\ironwill.txt
{
  "name": "Iron Will",
  "description": "You have a stronger will than normal.",
  "type": ["General"],
  "prerequisites": [],
  "benefit": "You get a +2 bonus on all Will saving throws."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\feats\powerattack.json
{
  "name": "Power Attack",
  "description": "You can make exceptionally powerful melee attacks.",
  "type": ["General", "Fighter Bonus Feat"],
  "prerequisites": [
    "Strength 13"
  ],
  "benefit": "On your action, before making attack rolls for a round, you may choose to subtract a number from all melee attack rolls and add the same number to all melee damage rolls. This number may not exceed your base attack bonus. The penalty on attacks and bonus on damage apply until your next turn.",
  "special": "If you attack with a two-handed weapon, or with a one-handed weapon wielded in two hands, instead add twice the number subtracted from your attack rolls. You can't add the bonus from Power Attack to the damage dealt with a light weapon (except with unarmed strikes or natural weapon attacks), even though the penalty on attack rolls still applies. A fighter may select Power Attack as one of his fighter bonus feats."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\feats\toughness.json
{
  "name": "Toughness",
  "description": "You are tougher than normal.",
  "type": ["General"],
  "prerequisites": [],
  "benefit": "You gain +3 hit points.",
  "special": "A character may gain this feat multiple times. Its effects stack."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\races\aasimar.json
{
  "name": "Aasimar",
  "description": "Aasimars are humans with a celestial ancestry, possessing an innate goodness.",
  "ability_score_adjustments": {
    "str": 0,
    "dex": 0,
    "con": 0,
    "int": 0,
    "wis": 2,
    "cha": 2
  },
  "size": "Medium",
  "base_speed": 30,
  "low_light_vision": false,
  "darkvision": 60,
  "immunities": [],
  "resistances": {
    "acid": 5,
    "cold": 5,
    "electricity": 5,
    "fire": 0
  },
  "bonuses": [
    {
      "type": "skill",
      "subtype": "Spot",
      "value": 2,
      "description": "+2 racial bonus on Spot checks."
    },
    {
      "type": "skill",
      "subtype": "Listen",
      "value": 2,
      "description": "+2 racial bonus on Listen checks."
    }
  ],
  "weapon_proficiencies": [],
  "weapon_familiarity": [],
  "automatic_languages": [
    "Common",
    "Celestial"
  ],
  "bonus_languages": [
    "Draconic",
    "Dwarven",
    "Elven",
    "Gnome",
    "Halfling",
    "Sylvan"
  ],
  "stability": false,
  "elven_blood": false,
  "orc_blood": false,
  "burrowing_mammal_affinity": false,
  "favored_class": "Paladin",
  "level_adjustment": 1
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\races\elf.json
{
  "name": "Elf",
  "description": "Elves are a graceful, long-lived race with a strong connection to magic.",
  "ability_score_adjustments": {
    "str": 0,
    "dex": 2,
    "con": -2,
    "int": 0,
    "wis": 0,
    "cha": 0
  },
  "size": "Medium",
  "base_speed": 30,
  "low_light_vision": true,
  "darkvision": 0,
  "immunities": [
    "sleep"
  ],
  "resistances": {
    "acid": 0,
    "cold": 0,
    "electricity": 0,
    "fire": 0
  },
  "bonuses": [
    {
      "type": "saving_throw",
      "subtype": "enchantment",
      "value": 2,
      "description": "+2 racial bonus on saving throws against enchantment spells or effects"
    },
    {
      "type": "skill",
      "subtype": "Listen",
      "value": 2,
      "description": "+2 racial bonus on Listen checks"
    },
    {
      "type": "skill",
      "subtype": "Search",
      "value": 2,
      "description": "+2 racial bonus on Search checks. also passive search on doors within 5 feet."
    },
    {
      "type": "skill",
      "subtype": "Spot",
      "value": 2,
      "description": "+2 racial bonus on Spot checks."
    }
  ],
  "weapon_proficiencies": [
    "longsword",
    "rapier",
    "longbow",
    "shortbow"
  ],
  "weapon_familiarity": [],
  "automatic_languages": [
    "Common",
    "Elven"
  ],
  "bonus_languages": [
    "Draconic",
    "Gnoll",
    "Gnome",
    "Goblin",
    "Orc",
    "Sylvan"
  ],
  "stability": false,
  "elven_blood": false,
  "orc_blood": false,
  "burrowing_mammal_affinity": false,
  "favored_class": "Wizard",
  "level_adjustment": 0
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\races\human.json
{
  "name": "Human",
  "description": "Humans are the most common race in the world, known for their adaptability and ambition.",
  "ability_score_adjustments": {
    "str": 0,
    "dex": 0,
    "con": 0,
    "int": 0,
    "wis": 0,
    "cha": 0
  },
  "size": "Medium",
  "base_speed": 30,
  "low_light_vision": false,
  "darkvision": 0,
  "immunities": [],
  "resistances": {
    "acid": 0,
    "cold": 0,
    "electricity": 0,
    "fire": 0
  },
  "bonuses": [
    {
      "type": "extra_skill_points",
      "value": 1,
      "description": "+1 Skill point each level, at each level"
    }
  ],
  "weapon_proficiencies": [],
  "weapon_familiarity": [],
  "automatic_languages": [
    "Common"
  ],
  "bonus_languages": [
    "Any"
  ],
  "stability": false,
  "elven_blood": false,
  "orc_blood": false,
  "burrowing_mammal_affinity": false,
  "favored_class": "Any",
  "level_adjustment": 0
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\appraise.json
{
    "name": "Appraise",
    "description": "Use this skill to tell an antique from old junk, a sword that's old and fancy from an elven heirloom, and high-quality jewelry from cheap stuff made to look good. You can also appraise the quality of a performance, a written work, and similar artistic endeavors.",
    "key_ability": "Int",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "You can appraise common or well-known objects with a DC 12 Appraise check. Failure means that you estimate the value at 50% to 150% (2d6+3 times 10%) of its actual value. Appraising a rare or exotic item requires a successful check against DC 15, 20, or higher. If the check is successful, you estimate the value correctly; failure means you cannot estimate the item's value.",
    "action": "Appraising an item takes 1 minute (ten consecutive full-round actions).",
    "try_again": "No. If you attempt a normal Appraise check, you cannot try again on the same object, regardless of success. If you fail to appraise an item quickly, you can still try to appraise the item normally.",
    "special": [
        {
            "name": "Dwarven Appraisal",
            "description": "A dwarf gets a +2 racial bonus on Appraise checks that are related to stone or metal items.",
            "data": {
                "bonus_type": "racial",
                "item_type": "stone/metal",
                "value": 2
            }
        },
        {
            "name": "Familiar bonus",
            "description": "The master of a raven familiar gains a +3 bonus on Appraise checks.",
            "data": {
                "bonus_type": "familiar",
                "familiar_type": "raven",
                "value": 3
            }
        },
        {
            "name": "Diligent Feat",
            "description": "A character with the Diligent feat gets a +2 bonus on Appraise checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Diligent",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Craft",
            "bonus": "+2 on appraise checks relating to items of that specific craft type"
        },
        {
            "skill": "Perform",
            "bonus": "+2 on Appraise checks related to performances using that Perform skill"
        }
    ],
    "restriction": "None.",
    "untrained": "For common items, failure on an untrained check means no estimate. For rare items, success means an estimate of 50% to 150% (2d6+3 times 10%)."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\autohypnosis.json
{
    "name": "Autohypnosis",
    "description": "You have trained your mind to gain mastery over your body and the mind's own deepest capabilities.",
    "key_ability": "Wis",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "The DC and the effect of a successful check depend on the task you attempt: \nIgnore caltrop wound: 18 \nMemorize: 15 \nResist dying: 20 \nResist fear: Fear effect DC \nTolerate poison: Poison's DC \nWillpower: 20 \nIgnore poison: Poison's DC + 5 \nRemain conscious: 30 \nSlippery mind: 50 \nTemporary hit points: 60 \nDamage reduction: 60.",
    "action": "None. Making an Autohypnosis check doesn't require an action.",
    "try_again": "Yes, for memorize and willpower uses, though a success doesn't cancel the effects of a previous failure. No for the other uses.",
    "special": [],
    "synergy": [
        {
            "skill": "Concentration",
            "bonus": "+2 on Autohypnosis checks"
        },
        {
            "skill": "Knowledge(psionics)",
            "bonus": "+2 on Autohypnosis checks"
        }
    ],
    "restriction": "Only for those with trained mind, lycantropy or other mind altering ability, at Dm's discretion",
    "untrained": "You can only use for simple or very common daily tasks that a trained user could use with a much higher reliability/skill level (at the DM's discretion, following intended uses or rules for those checks). No action."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\balance.json
{
    "name": "Balance",
    "description": "Use this skill to keep your balance while walking on a tightrope, a narrow beam, a slippery ledge, or an uneven floor.",
    "key_ability": "Dex",
    "trained_only": false,
    "armor_check_penalty": true,
    "check": "You can walk on a precarious surface. A successful check lets you move at half your speed along the surface for 1 round. A failure by 4 or less means you can't move for 1 round. A failure by 5 or more means you fall. The difficulty varies with the surface.",
    "action": "None. A Balance check doesn't require an action.",
    "try_again": "Yes, but a new check may be needed every time your character tries to act or move when falling, taking damage, moving on dangerous surfaces.",
    "special": [
        {
            "name": "Agile feat",
            "description": "If you have the Agile feat, you get a +2 bonus on Balance checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Agile",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Tumble",
            "bonus": "+2 on Balance checks"
        }
    ],
    "restriction": "None",
    "untrained": "A Balance check result greater than 15 allows movement along a lightly obstructed surface with limited penalties. No other behaviors can be achieved if not trained with specific ranks or feat usage. Any action might also lead to falls"
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\bluff.json
{
    "name": "Bluff",
    "description": "Use this skill to make the outrageous or the untrue seem plausible, or use doublespeak or innuendo to deliver a secret message to another character. It encompasses acting, conning, fast talking, misdirection, prevarication, and misleading body language.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "A Bluff check is opposed by the target's Sense Motive check.",
    "action": "Varies. A Bluff check made as part of general interaction always takes at least 1 round (and is at least a full-round action), but it can take much longer. A Bluff check made to feint in combat or create a diversion to hide is a standard action.",
    "try_again": "Varies. Generally, a failed Bluff check in social interaction makes the target too suspicious for you to try again in the same circumstances, but you may retry freely on Bluff checks made to feint in combat or send messages, although those carry the risk of failing.",
    "special": [
        {
            "name": "Ranger Bonus",
            "description": "A ranger gains a bonus on Bluff checks when using this skill against a favored enemy.",
            "data": {
                "bonus_type": "favored_enemy"
            }
        },
        {
            "name": "Familiar bonus",
            "description": "The master of a snake familiar gains a +3 bonus on Bluff checks.",
            "data": {
                "bonus_type": "familiar",
                "familiar_type": "snake",
                "value": 3
            }
        },
        {
            "name": "Persuasive Feat",
            "description": "If you have the Persuasive feat, you get a +2 bonus on Bluff checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Persuasive",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Intimidate",
            "bonus": "+2 on Intimidate checks"
        },
        {
            "skill": "Disguise",
            "bonus": "+2 on Disguise checks to act in character when observed."
        },
        {
            "skill": "Sleight of Hand",
            "bonus": "+2 on Sleight of Hand checks"
        },
        {
            "skill": "Diplomacy",
            "bonus": "+2 on Diplomacy checks"
        }
    ],
    "restriction": "None",
    "untrained": "The user may try bluff but may face a DC+5 on the check. No other hardcoded implementation."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\climb.json
{
    "name": "Climb",
    "description": "Use this skill to scale a cliff, to get to the window on the second story of a wizard's tower, or to climb out of a pit after falling through a trapdoor.",
    "key_ability": "Str",
    "trained_only": false,
    "armor_check_penalty": true,
    "check": "With a successful Climb check, you can advance up, down, or across a slope, a wall, or some other steep incline (or even a ceiling with handholds) at one-quarter your normal speed.",
    "action": "Climbing is part of movement, so it's generally part of a move action.",
    "try_again": "Yes.",
    "special": [
        {
            "name": "Halfling Climb Bonus",
            "description": "A halfling has a +2 racial bonus on Climb checks.",
            "data": {
                "bonus_type": "racial",
                "value": 2
            }
        },
        {
            "name": "Familiar bonus",
            "description": "The master of a lizard familiar gains a +3 bonus on Climb checks.",
            "data": {
                "bonus_type": "familiar",
                "familiar_type": "lizard",
                "value": 3
            }
        },
        {
            "name": "Athletic Feat",
            "description": "If you have the Athletic feat, you get a +2 bonus on Climb checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Athletic",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Use Rope",
            "bonus": "+2 on Climb checks made to climb a rope, a knotted rope, or a rope-and-wall combination."
        }
    ],
    "restriction": "A character may need specific tools, like rope or a piton.",
    "untrained": "Untrained users may still try climbing if an easy DC like 0-10, depending on difficulty. It might be too difficult to apply more challenging activities."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\concentration.json
{
    "name": "Concentration",
    "description": "You are particularly good at focusing your mind.",
    "key_ability": "Con",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "You must make a Concentration check whenever you might potentially be distracted (by taking damage, by harsh weather, and so on) while engaged in some action that requires your full attention.",
    "action": "Usually none. In most cases, making a Concentration check doesn't require an action",
    "try_again": "Yes, though a success doesn't cancel the effect of a previous failure, such as the loss of a spell you were casting or the disruption of a spell you were concentrating on.",
    "special": [
        {
            "name": "Defensive actions",
            "description": "You can use Concentration to cast a spell, use a spell-like ability, manifest a power, or use a skill defensively, so as to avoid attacks of opportunity altogether, but such tasks have a increased difficulty.",
            "data": {
                "extra_DC": 15
            }
        },
        {
            "name": "Combat Casting feat",
            "description": "A character with the Combat Casting feat gets a +4 bonus on Concentration checks made to cast a spell or use a spell-like ability while on the defensive or while grappling or pinned.",
            "data": {
                "feat": "Combat Casting",
                "value": 4,
                "type": "spells"
            }
        },
        {
            "name": "Combat Manifestation feat",
            "description": "A character with the Combat Manifestation feat gets a +4 bonus on Concentration checks made to manifest a power or use a psi-like ability while on the defensive or while grappling or pinned.",
            "data": {
                "feat": "Combat Manifestation",
                "value": 4,
                "type": "powers"
            }
        }
    ],
    "synergy": [
        {
            "skill": "Autohypnosis",
            "bonus": "+2 bonus on Autohypnosis checks"
        },
        {
            "skill": "Perform",
            "bonus": "+2 bonus on Concentration checks to resist heckling while using that skill."
        }
    ],
    "restriction": "None",
    "untrained": "May use the skill untrained. The basic mechanics still applies if a save throw/check or other data within that system can be obtained without specific ranks. May suffer increased failure penalties depending on hardcoded implementations of these."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\controlshape.json
{
    "name": "Control Shape",
    "description": "This skill determines whether an afflicted lycanthrope can control his shape.",
    "key_ability": "Wis",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can use this skill to control your shape as a lycanthrope. Involuntary shape change: 25 or DC based on the wound taken. See documentation for Voluntary shape changes: Return to humanoid form (full moon) 25, (not full moon) 20. Assume hybrid form 15, Volutary change to animal form: 15 full moon or 20 without it.",
    "action": "None. An Autohypnosis check doesn't require an action",
    "try_again": "Yes for voluntary changes to animal or hybrid form. No, for other cases.",
    "special": [],
    "synergy": [],
    "restriction": "Only those afflicted by lycantropy or other transformations can train and use this skill. Others can use an untrained version to test their natural skill in these behaviors.",
    "untrained": "An afflicted lycanthrope not yet aware of his condition can attempt Control Shape checks untrained to understand why that shape change occurs. Failure makes a creature to transform involuntarily."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\craft.json
{
    "name": "Craft",
    "description": "You are trained in a craft, trade, or art, such as alchemy, armorsmithing, basketweaving, bookbinding, bowmaking, blacksmithing, calligraphy, carpentry, cobbling, gemcutting, leatherworking, locksmithing, painting, pottery, sculpting, shipmaking, stonemasonry, trapmaking, weaponsmithing, or weaving.",
    "key_ability": "Int",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "You can practice your trade and make a decent living, earning about half your check result in gold pieces per week of dedicated work.",
    "action": "Craft checks are made by the day or week.",
    "try_again": "Yes, but each time you miss by 5 or more, you ruin half the raw materials and have to pay half the original raw material cost again.",
    "special": [
        {
            "name": "Dwarven Craft",
            "description": "A dwarf has a +2 racial bonus on Craft checks that are related to stone or metal.",
            "data": {
                "bonus_type": "racial",
                "item_type": "stone/metal",
                "value": 2
            }
        },
        {
            "name": "Gnome Craft",
            "description": "A gnome has a +2 racial bonus on Craft (alchemy) checks.",
            "data": {
                "bonus_type": "racial",
                "skill": "alchemy",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Appraise",
            "bonus": "+2 on Appraise checks related to items made with that Craft skill."
        }
    ],
    "restriction": "Must have specific proficiencies for creating magic/alchemic items, traps, warforged, etc.",
    "untrained": "Can make common objects but those might have less value or become useless at higher DC, especially in regards to time usage and raw material costs."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\decipherscript.json
{
    "name": "Decipher Script",
    "description": "Use this skill to piece together the meaning of ancient runes carved into the wall of an abandoned temple, to get the gist of an intercepted letter written in the Infernal language, to follow the directions on a treasure map written in a forgotten alphabet, or to interpret the mysterious glyphs painted on a cave wall.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can decipher writing in an unfamiliar language or a message written in an incomplete or archaic form. If the check succeeds, you understand the general content of a piece of writing about one page long.",
    "action": "Deciphering the equivalent of a single page of script takes 1 minute (ten consecutive full-round actions). Creating a cipher takes a week of uninterrupted work. Deciphering the equivalent of a single page of coded script takes 1 hour.",
    "try_again": "No for first time decryption. Yes for decrypting your own cyphers/codes but must take at least a day and even a week to do so after the first try, unless other time-reducing abilities are used.",
    "special": [
        {
            "name": "Diligent feat",
            "description": "A character with the Diligent feat gets a +2 bonus on Decipher Script checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Diligent",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Use Magic Device",
            "bonus": "+2 bonus on Use Magic Device checks involving scrolls."
        }
    ],
    "restriction": "Literacy required to train.",
    "untrained": "Not possible, no check is done by untrainee user."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\diplomacy.json
{
    "name": "Diplomacy",
    "description": "Use this skill to persuade the chamberlain to let you see the king, to negotiate peace between feuding barbarian tribes, or to convince the ogre mages that have captured you that they should ransom you back to your friends instead of twisting your limbs off one by one. Diplomacy includes etiquette, social grace, tact, subtlety, and a way with words.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "You can change the attitudes of others with a successful Diplomacy check. In negotiations, participants roll opposed Diplomacy checks, and the winner gains the advantage.",
    "action": "Changing others' attitudes with Diplomacy generally takes at least 1 full minute. A rushed Diplomacy check can be made as a full-round action with penalties.",
    "try_again": "Optional, but not recommended because retries usually do not work.",
    "special": [
        {
            "name": "Half-elf diplomacy",
            "description": "A half-elf has a +2 racial bonus on Diplomacy checks.",
            "data": {
                "bonus_type": "racial",
                "value": 2
            }
        },
        {
            "name": "Negotiator Feat",
            "description": "If you have the Negotiator feat, you get a +2 bonus on Diplomacy checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Negotiator",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Bluff",
            "bonus": "+2 on Diplomacy checks."
        },
        {
            "skill": "Sense Motive",
            "bonus": "+2 on Diplomacy checks."
        },
        {
            "skill": "Knowledge(nobility and royalty)",
            "bonus": "+2 on Diplomacy checks."
        }
    ],
    "restriction": "None",
    "untrained": "You can make diplomacy checks untrained, though may face added DC's as a consequence of a failed check."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\disabledevice.json
{
    "name": "Disable Device",
    "description": "Use this skill to disarm a trap, jam a lock (in either the open or closed position), or rig a wagon wheel to fall off.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can examine a mechanical device and disable it, with varying DC's depending on difficulty, such as rigging a trap, sabotaging a vehicle, and similar actions.",
    "action": "A device, generally speaking, requires at least a full-round action to be handled and possibly several rounds of continuous action (based on device type and complexity). You may, by imposing additional difficulties in the test, perform those faster.",
    "try_again": "Yes, as long as a failure isn't critical (such as a springed trap, in this case a failure would break this retry possibility)",
    "special": [
        {
            "name": "Nimble Fingers Feat",
            "description": "If you have the Nimble Fingers feat, you get a +2 bonus on Disable Device checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Nimble Fingers",
                "value": 2
            }
        }
    ],
    "synergy": [],
    "restriction": "Only Rogues and characters with similar special ability can attempt this skill to disarm magic traps.",
    "untrained": "Untrained users can't attempt this."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\disguise.json
{
    "name": "Disguise",
    "description": "Use this skill to change your appearance or someone else's. It may include impersonating individuals, and temporarily changing the function of an item to appear as something else.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Your Disguise check result is opposed by the Spot check of anyone who might see you, unless they are uninterested, or otherwise, your actions remain unoticed by your audience or targeted individual.",
    "action": "Creating a disguise requires 1d3x10 minutes of work.",
    "try_again": "Yes. You may try to redo a failed disguise, but once others know that a disguise was attempted, they'll be more suspicious.",
    "special": [
        {
            "name": "Form-altering magic bonus",
            "description": "Magic that alters your form grants you a +10 bonus on Disguise checks",
            "data": {
                "bonus_type": "magic",
                "value": 10
            }
        },
        {
            "name": "Deceitful feat",
            "description": "If you have the Deceitful feat, you get a +2 bonus on Disguise checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Deceitful",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Bluff",
            "bonus": "+2 on Disguise checks when observed, in character."
        }
    ],
    "restriction": "None.",
    "untrained": "Untrained characters can only use it to attempt a minor changes in clothing and similar minor modifications to make an impression, no special or advanced techniques."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\escapeartist.json
{
    "name": "Escape Artist",
    "description": "Use this skill to slip out of bonds or manacles, wriggle through tight spaces, or escape the grip of a monster that grapples you.",
    "key_ability": "Dex",
    "trained_only": true,
    "armor_check_penalty": true,
    "check": "You can use this skill to try to escape from rope bindings, manacles, or tight spaces. Each action takes several turns, and its effects are decided based on opposed skill checks or the object窶冱 DC to resist those.",
    "action": "Making an Escape Artist check to escape from rope bindings, manacles, or other restraints requires 1 minute of work. Escaping from a net or an animate rope, command plants, control plants, or entangle spell is a full-round action.",
    "try_again": "Yes for squeezing your way through tight spaces or trying again when opposed.",
    "special": [
        {
            "name": "Agile feat",
            "description": "If you have the Agile feat, you get a +2 bonus on Escape Artist checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Agile",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Use Rope",
            "bonus": "+2 on Escape Artist checks when escaping from rope bonds"
        },
        {
            "skill": "Use Rope",
            "bonus": "+2 on Escape Artist checks made to bind someone"
        }
    ],
    "restriction": "Must be trained",
    "untrained": "An untrained user may make simple Dex checks, but will likely fail, suffer severe damage, or not achieve anything when opposed with a more advanced restrain such as magic"
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\forgery.json
{
    "name": "Forgery",
    "description": "Use this skill to fake a written order from the duchess instructing a jailer to release prisoners, to create an authentic-looking treasure map, or to detect forgeries that others try to pass off.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "Forgery requires writing materials, some light and a source of handwriting or a similar document. The result is checked whenever someone tries to authenticate that given forgery with a specific DC.",
    "action": "Forging a very short and simple document takes about 1 minute. A longer or more complex document takes 1d4 minutes per page.",
    "try_again": "No. The result of a Forgery check for a particular document must be used for every instance of a different reader examining the document. No reader can attempt to detect a particular forgery more than once.",
    "special": [
        {
            "name": "Deceitful feat",
            "description": "If you have the Deceitful feat, you get a +2 bonus on Forgery checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Deceitful",
                "value": 2
            }
        }
    ],
    "synergy": [],
    "restriction": "Forgery is language-dependent, a user must be able to read/write it",
    "untrained": "Untrained characters can only make simple forgeries for generic text and have little chances to deceive readers in those checks without additional preparation for specific tasks"
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\gatherinformation.json
{
    "name": "Gather Information",
    "description": "Use this skill for making contacts in an area, finding out local gossip, rumormongering, and collecting general information.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "A few gold pieces for drinks, plus 1d4 hours, along with a successful check to gain information of varying qualities depending on the roll.",
    "action": "A typical Gather Information check takes 1d4+1 hours.",
    "try_again": "Yes but you might become suspect if too frequent.",
    "special": [
        {
            "name": "Half-elf Gather Info Bonus",
            "description": "A half-elf has a +2 racial bonus on Gather Information checks.",
            "data": {
                "bonus_type": "racial",
                "value": 2
            }
        },
        {
            "name": "Investigator Feat",
            "description": "If you have the Investigator feat, you get a +2 bonus on Gather Information checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Investigator",
                "value": 2
            }
        },
        {
            "name": "Urban Tracking Feat",
            "description": "If you have the Urban Tracking feat, you can use Gather Information to track down the location of missing persons or wanted individuals within communities.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Urban Tracking"
            }
        }
    ],
    "synergy": [
        {
            "skill": "Knowledge (local)",
            "bonus": "+2 on Gather Information checks."
        }
    ],
    "restriction": "None",
    "untrained": "An untrained check will result in little, vague, unreliable information, though that still can give the user useful or valid clues and paths."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\handleanimal.json
{
    "name": "Handle Animal",
    "description": "Use this skill to drive a team of horses pulling a wagon over rough terrain, to teach a dog to guard, or to teach a tyrannosaur to speak on your command. A Druid or a Ranger handles their animal companion a lot better and can perform certain actions (push or attack) with less risk or more effectively.",
    "key_ability": "Cha",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "A check to perform a basic, pre existing trick has a DC of 10. To teach it something new requires DC 15-20, pushing them through more difficult tasks/orders also use a higher DC such as 25.",
    "action": "Varies, such as standard or full-round for pushing an animal, or training.",
    "try_again": "Yes for most tasks except for rearing a new animal.",
    "special": [
        {
            "name": "Druid/Ranger Handle bonus",
            "description": "A druid or ranger gains a +4 circumstance bonus on Handle Animal checks involving her animal companion. Also some druids have their companion already know several skills.",
            "data": {
                "bonus_type": "class",
                "value": 4,
                "class": [
                    "druid",
                    "ranger"
                ]
            }
        },
        {
            "name": "Animal Affinity feat",
            "description": "If you have the Animal Affinity feat, you get a +2 bonus on Handle Animal checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Animal Affinity",
                "value": 2
            }
        },
        {
            "name": "Vermin Trainer Feat",
            "description": "If you have the Vermin Trainer feat, you can handle and train mindless vermin with the Handle Animal skill.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Vermin Trainer"
            }
        }
    ],
    "synergy": [],
    "restriction": "Non-domestic animals may prove harder to train or push using this method.",
    "untrained": "If not trained you may attempt using it through a Charisma check with domestic animals, but can't attempt complex behaviors, training or other difficult commands."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\heal.json
{
    "name": "Heal",
    "description": "Use this skill to keep a badly wounded friend from dying, to help others recover faster from wounds, to keep your friend from succumbing to a wyvern's sting, or to treat disease. ",
    "key_ability": "Wis",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "First aid (DC 15), Long-term care (DC 15). Treating wounds from specific sources like traps has a DC of 15. Treating poisons and diseases is as hard as their effects. Quick or Perfect Recovery of health can only be done through a successful check of 50-100",
    "action": "Treating wounds or administering first aid requires a standard action. Treat disease and a longer treat requires a full round or several rounds depending on their complexity. Longer treatment and perfect recoveries use a single action or for a whole hour. Using it for cause of death uses 10 minutes.",
    "try_again": "Yes. Retries are possible depending on the nature of the failed test such as if the person being helped was harmed, stabilized or has been helped through other magical methods such as cure spells.",
    "special": [
        {
            "name": "Self-Sufficient feat",
            "description": "A character with the Self-Sufficient feat gets a +2 bonus on Heal checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Self-Sufficient",
                "value": 2
            }
        },
        {
            "name": "Healer Kit bonus",
            "description": "A healer's kit gives you a +2 circumstance bonus on Heal checks.",
            "data": {
                "bonus_type": "equipment",
                "value": 2
            }
        }
    ],
    "synergy": [],
    "restriction": "You cannot apply those on yourself (except with very basic effects and abilities). Also may need to have specialized knowledge and procedures to perform more difficult healing related tests (such as poison, disease or magic related cures).",
    "untrained": "Untrained users can perform only basic checks like simple, small bandages or to apply a poultice, and have severe limitations to dealing with diseases and magical cures."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\hide.json
{
    "name": "Hide",
    "description": "Use this skill to sink back into the shadows and proceed unseen, to approach a wizard's tower under cover of brush, or to tail someone through a busy street without being noticed.",
    "key_ability": "Dex",
    "trained_only": false,
    "armor_check_penalty": true,
    "check": "Your Hide check is opposed by the Spot check of anyone who might see you. You can move up to one-half your normal speed and hide at no penalty. When moving at a speed greater than one-half but less than your normal speed, you take a -5 penalty.",
    "action": "Usually none. Hiding immediately after a ranged attack is a move action.",
    "try_again": "No unless you break the observer's line of sight.",
    "special": [
        {
            "name": "Invisibility bonus",
            "description": "If you are invisible, you gain a +40 bonus on Hide checks if you are immobile, or a +20 bonus on Hide checks if you're moving.",
            "data": {
                "bonus_type": "condition",
                "condition_type": "invisibility",
                "immobile_value": 40,
                "moving_value": 20
            }
        },
        {
            "name": "Stealthy feat",
            "description": "If you have the Stealthy feat, you get a +2 bonus on Hide checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Stealthy",
                "value": 2
            }
        },
        {
            "name": "Ranger Stealth bonus",
            "description": "A 13th-level ranger can attempt a Hide check in any sort of natural terrain, even if it doesn't grant cover or concealment. A 17th-level ranger can do this even while being observed.",
            "data": {
                "bonus_type": "class",
                "level_13": true,
                "level_17": true,
                "class": [
                    "ranger"
                ]
            }
        }
    ],
    "synergy": [],
    "restriction": "You need cover or concealment in order to attempt a Hide check, and specific skills, features or magical abilities.",
    "untrained": "Without ranks you are likely to be easily found and take major penalties unless proper conditions (darkness, etc) apply."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\intimidate.json
{
    "name": "Intimidate",
    "description": "Use this skill to get a bully to back down, to frighten an opponent, or to make a prisoner give you the information you want. Intimidation includes verbal threats and body language.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "You can change another's behavior with a successful check. Your Intimidate check is opposed by the target's modified level check. A successful Demoralize Opponent check also gives your enemy the 'Shaken' effect, which will result in a small penalty.",
    "action": "Varies. Changing another's behavior requires 1 minute of interaction. Intimidating an opponent in combat is a standard action. Instigating a duel of wills requires no action and occurs before initiative is rolled.",
    "try_again": "Optional, but not recommended because retries usually do not work.",
    "special": [
        {
            "name": "Size modifier",
            "description": "You gain a +4 bonus on your Intimidate check for every size category that you are larger than your target.",
            "data": {
                "bonus_type": "size",
                "value": 4
            }
        },
        {
            "name": "Persuasive feat",
            "description": "If you have the Persuasive feat, you get a +2 bonus on Intimidate checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Persuasive",
                "value": 2
            }
        },
        {
            "name": "Unnerving Calm Feat",
            "description": "If you have the Unnerving Calm feat, you can use your Concentration skill in place of your Intimidate skill when engaging in a duel of wills.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Unnerving Calm"
            }
        }
    ],
    "synergy": [
        {
            "skill": "Bluff",
            "bonus": "+2 bonus on Intimidate checks."
        }
    ],
    "restriction": "Those immune to fear or creatures with no inteligence are immune to Intimidate checks.",
    "untrained": "Untrained characters can use this skill, but will not likely achieve high results as most hardcoded behaviors and functionalities are meant for users that have some familiarity with those techniques."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\jump.json
{
    "name": "Jump",
    "description": "Use this skill to leap over pits, vault low fences, or reach a tree's lowest branches.",
    "key_ability": "Str",
    "trained_only": false,
    "armor_check_penalty": true,
    "check": "The DC and the distance you can cover vary according to the type of jump you are attempting. All DCs are based on a 20 ft running start.",
    "action": "None. A Jump check is included in your movement.",
    "try_again": "Yes, by performing again (moving with another jump).",
    "special": [
        {
            "name": "Run Feat bonus",
            "description": "If you have the Run feat, you get a +4 bonus on Jump checks for any jumps made after a running start.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Run",
                "value": 4
            }
        },
        {
            "name": "Halfling Jump bonus",
            "description": "A halfling has a +2 racial bonus on Jump checks.",
            "data": {
                "bonus_type": "racial",
                "value": 2
            }
        },
        {
            "name": "Acrobatic feat bonus",
            "description": "If you have the Acrobatic feat, you get a +2 bonus on Jump checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Acrobatic",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Tumble",
            "bonus": "+2 bonus on Jump checks."
        }
    ],
    "restriction": "If untrained and you do not beat the DC by 5 or more you automatically land prone unless you beat that threshold.",
    "untrained": "Can jump untrained but it may incur negative conditions unless it beats DC."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgearcana.json
{
    "name": "Knowledge (Arcana)",
    "description": "Knowledge (arcana) involves the study of ancient mysteries, magic traditions, arcane symbols, cryptic phrases, constructs, dragons, magical beasts, and Incarnum.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "Use this skill to identify arcane spells, magic traditions, magic items and effects.",
    "action": "Usually none, knowledge skills don't take a particular action.",
    "try_again": "No, you can only rely on what is known through proper study. No additional info from just trying to know a given information.",
    "special": [],
    "synergy": [
        {
            "skill": "Spellcraft",
            "bonus": "+2 bonus on Spellcraft checks"
        }
    ],
    "restriction": "Trained only. Specific types may also require special procedures, equipment or training to implement it. Some features may also have their power reduced depending on the source (a creature from a plane of magic may make less calls to your engine than, say, a normal wizard.",
    "untrained": "This knowledge is only attainable through specific training and cannot be used by those without any ranks on the skill."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgearchitectureengineering.json
{
    "name": "Knowledge (Architecture and Engineering)",
    "description": "Knowledge (architecture and engineering) covers buildings, aqueducts, bridges, and fortifications, including the science of naval architecture, ship design, and construction techniques for large vessels. Also the study of ships.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "A check may be made to inspect or analyze structures or fortifications to detect hidden entrances or structural weaknesses as well as to guide/manage construction for various complex buildings and devices, including ships. You can build large ships but smaller ones must rely on different crafts, such as with boatbuilding",
    "action": "Usually none.",
    "try_again": "No. You can only know something that was studied.",
    "special": [],
    "synergy": [
        {
            "skill": "Search",
            "bonus": "+2 on Search checks made to find secret doors or hidden compartments"
        }
    ],
    "restriction": "You cannot identify complex information or objects from far distances. Ship creation requires knowledge, specialized equipment, a yard and access to workers. Shipwright expertise and high rank in the craft skills also improve creation.",
    "untrained": "Untrained people may make generic checks to use architectural structures in a more basic level (to check the structural stability or basic data), but will have little to no success at identifying traps or understanding specific or complex parts of buildings, aqueducts, or ships or even complex machines."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgedungeoneering.json
{
    "name": "Knowledge (Dungeoneering)",
    "description": "Knowledge (dungeoneering) is related to the study of aberrations, caverns, oozes, and spelunking. Including underground environments, specific features of underground terrain, identifying unique types of dangers from those, as well as their possible countermeasures or known characteristics that makes this skill essential for exploring these regions. It is also a great tool for dealing with underground monsters or unique encounters that come with said territory",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You may recall details about aberrations, caverns, oozes, and similar environments as well as being useful for exploring those in a safer way. You can analyze cavern or tunnel patterns, detect danger and so on.",
    "action": "Usually none, knowledge skills don't take a specific action unless there is a given requirement or procedure to use those for another purpose or special power or item.",
    "try_again": "No. You can only recall information already known.",
    "special": [],
    "synergy": [
        {
            "skill": "Survival",
            "bonus": "+2 on Survival checks made while underground."
        }
    ],
    "restriction": "Must be trained.",
    "untrained": "Without this skill users may not detect or recognize danger signals or specific elements of the dungeoneering environment, thus causing increased vulnerability or more problems to travel."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgegeography.json
{
    "name": "Knowledge (Geography)",
    "description": "Knowledge (geography) encompasses lands, terrain, climate, people, routes of travel and specific localizations (cities, areas) and natural conditions",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "Using the knowledge about a given area, its terrain or climate may help the player to avoid getting lost or use terrain to his or her advantage as well as to improve other checks and interactions with areas based on your experience in those places, also as a requirement for specific actions such as ship piloting. Navigation skills use specific methods related to this Knowledge as its basic requirements.",
    "action": "Usually none. In specific areas that also impact specific skill types, you will then take actions based on that.",
    "try_again": "No. You only know information from a certain area, map or similar location, or do not.",
    "special": [],
    "synergy": [
        {
            "skill": "Survival",
            "bonus": "+2 on Survival checks made to keep from getting lost or to avoid natural hazards."
        }
    ],
    "restriction": "Requires training",
    "untrained": "Untrained users cannot understand cartography, the effects of weather conditions and have difficulty using terrain in a favorable manner to travel in unknown territory or by creating strategies to gain an advantage using these conditions."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgehistory.json
{
    "name": "Knowledge (History)",
    "description": "Knowledge (history) covers royalty, wars, colonies, migrations, the founding of cities and also includes knowledge about historic figures, or any information that relates to these concepts through their historic perspective and their effects through different timelines or eras. Knowledge on warfare, command structure of armies, or strategies.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can use it to recall events or specific details on events or individuals from the past.",
    "action": "Usually none, the skill usually functions as an informative source for other areas of the game, such as combat, interactions with NPCs, or similar scenarios. Planning, strategies, understanding organizations, may be better prepared by learning what they have been, what was or not successful, what strategies worked and why.",
    "try_again": "No. You cannot learn things from a past you haven't experienced (or learned/studied).",
    "special": [],
    "synergy": [
        {
            "skill": "Bardic Knowledge",
            "bonus": "+2 bonus on bardic knowledge checks"
        }
    ],
    "restriction": "You must be literate to gain full usage from the skill since many details depend on recorded knowledge.",
    "untrained": "You may vaguely recognize a known fact/date or similar events from history, but those will likely prove very general or completely unusable without specific training."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgelocal.json
{
    "name": "Knowledge (Local)",
    "description": "Knowledge (local) is related to a given place's legends, personalities, inhabitants, laws, customs, and traditions as well as local knowledge of a given area, which can also influence interactions and behavior through specific information you've learned such as by getting familiar with their hierarchy or ways to conduct your affairs there using common customs.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can use this skill to make observations or perform relevant checks by using what is considered commonplace knowledge within a given place or specific social context/environment.",
    "action": "Usually none.",
    "try_again": "No, as you have a certain degree of information (or you don't), as defined within that given locality.",
    "special": [],
    "synergy": [
        {
            "skill": "Gather Information",
            "bonus": "+2 on Gather Information checks."
        }
    ],
    "restriction": "Must have at least a working knowledge of common local habits, rules or common patterns that follow or are dictated by the rules/organization of those locations, even for dynamic or custom created locations that exist on your content data, including those created through user input.",
    "untrained": "An untrained character may vaguely identify an organization or rule in their given local area, but this may result in little reliable information that may or may not even make sense within a wider context or understanding."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgenature.json
{
    "name": "Knowledge (Nature)",
    "description": "Knowledge (nature) involves animals, fey, giants, monstrous humanoids, plants, seasons and cycles, weather, and vermin, as well as elements such as land conditions, forest, and so on.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can use this skill to identify creatures (or species, families) or to learn to properly manage/adapt to your given location or environment such as tracking, creating basic medicines/herbs, weather predictions and so on",
    "action": "Usually none.",
    "try_again": "No. Once an information from nature has been perceived and understood then you can't learn a second time or reapply knowledge from previous checks.",
    "special": [],
    "synergy": [
        {
            "skill": "Survival",
            "bonus": "+2 on Survival checks made in aboveground natural environments"
        }
    ],
    "restriction": "May need to be at or near the environment or with related clues/traces or using specific materials for testing that.",
    "untrained": "Without specific training those features will have severely limited or very poor effects, especially for more exotic/dangerous animals, weather or regions."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgenobilityroyalty.json
{
    "name": "Knowledge (Nobility and Royalty)",
    "description": "Knowledge (nobility and royalty) encompasses lineages, heraldry, family trees, mottoes, and personalities.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "Use this skill to identify people, or locations that belong to, a specific family or lineage using titles, flags, coat of arms, banners, sigils, mottos or other relevant clues. Can be used to interact better in areas ruled by nobles or to identify where those might have influence.",
    "action": "Usually none.",
    "try_again": "No. As knowledge of facts about the present and history, you can't retry unless new information is added.",
    "special": [],
    "synergy": [
        {
            "skill": "Diplomacy",
            "bonus": "+2 bonus on Diplomacy checks."
        }
    ],
    "restriction": "Specific locations and areas (like knowing how certain families function in their respective regions/areas). Or to identify specific symbols.",
    "untrained": "Untrained individuals cannot make heads or tails of most details or hierarchies of royal bloodlines, lineages or organizations."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgepsionics.json
{
    "name": "Knowledge (Psionics)",
    "description": "Knowledge (psionics) involves the study of ancient mysteries, psionic traditions, psionic monsters, psychic symbols, cryptic phrases, astral constructs, and psionic races.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You may use it to understand what Psionics entails and their effect/usage, what kind of objects are or aren't tied to them, and for identifying monsters, devices or characters from this realm. You can also better handle items, artifacts and specific regions that share psionic properties.",
    "action": "Usually none, if you need to test any psionic powers those will also require a related test (i.e. from items, abilities).",
    "try_again": "No. It's based on knowledge and if you did not learn or retain any data from an initial experience you won't obtain it after an extra analysis. You can't change facts, what's been studied, experienced or researched previously.",
    "special": [],
    "synergy": [
        {
            "skill": "Psicraft",
            "bonus": "+2 on Psicraft checks"
        },
        {
            "skill": "Autohypnosis",
            "bonus": "+2 on Autohypnosis checks"
        }
    ],
    "restriction": "Must have studied or be related to Psionics or other mind-related training to gain a higher grasp on how psionics works.",
    "untrained": "Untrained user have basic awareness on mind magic and its usage. They may also identify creatures/locations from that, but the lack of proper training will result in mostly incomplete, vague or unusable information."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgereligion.json
{
    "name": "Knowledge (Religion)",
    "description": "Knowledge (religion) involves gods and goddesses, mythic history, ecclesiastic tradition, holy symbols, and the undead. As well as specific behaviors/procedures tied to said belief, such as prayer or performing holy acts in those locations.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "Use this skill to understand religious concepts or specific implementations from given faiths as well as interacting with relevant religious characters or items.",
    "action": "Usually none, as an intellectual process.",
    "try_again": "No. The knowledge acquired about the faith (or a religious figure, holy items and so on) remains in place and does not get improved or discovered if trying the same action repeatedly.",
    "special": [],
    "synergy": [
        {
            "skill": "Intimidate",
            "bonus": "+2 bonus on checks to turn or rebuke undead."
        }
    ],
    "restriction": "This is based on learning and understanding a given faith through years of study and practice. To fully access all the details from its structure (and similar relevant content) requires literacy or related teachings, specific rituals and traditions as they're written in those tomes and other religious related sources (if relevant)",
    "untrained": "An untrained user has vague understanding of popular religions but their interpretation of religious data, figures or beliefs, is likely going to be incorrect and based on unreliable or basic/incomplete data and traditions that lacks key data (and context). As such, you may still have vague ideas, general information but not deep or applicable data for a trained usage, with all that this implies for using or understanding that content/knowledge in a dynamic game with specific behaviors from data or elements from those that also interact through hardcoded parts (using said dynamic content with Ids)."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\knowledgetheplanes.json
{
    "name": "Knowledge (The Planes)",
    "description": "Knowledge (the planes) deals with the Inner Planes, the Outer Planes, the Astral Plane, the Ethereal Plane, outsiders, elementals, and magic related to the planes, as well as any interdimensional phenomena.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "This knowledge helps you deal with locations, entities or materials related to these locations.",
    "action": "Usually none unless to check/detect the planar related activity or use its knowledge to further explore them using this hardcoded functionality. Some abilities or items might need this data when making dynamic calls within your system.",
    "try_again": "No. It relies on memory and learned patterns/concepts for which a repeat of that process wont help, if no further information becomes available. You cannot just learn this through sheer will or further thinking without external input of those informations.",
    "special": [],
    "synergy": [
        {
            "skill": "Survival",
            "bonus": "+2 bonus on Survival checks made while on other planes."
        }
    ],
    "restriction": "Requires knowledge of interdimensional or magical forces to exist. Also it might be hard to use in planar areas if you did not acquire or possess those skills in specific, specialized manners to interact and move on such environments (including identifying or interacting with creatures that might be present in those locations and/or following rules for these realms)",
    "untrained": "Without this knowledge you have no idea how extra-dimensional beings or other locations are. You also have no specific method of interaction, transportation, rules or behavior, and will be lost when using skills in said realms."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\listen.json
{
    "name": "Listen",
    "description": "Use this skill to hear approaching enemies, to detect someone sneaking up on you from behind, or to eavesdrop on someone else's conversation.",
    "key_ability": "Wis",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Your Listen check is either made against a DC that reflects how quiet the noise is or it is opposed by your target's Move Silently check. High DCs allow the user to be more aware of the situation (such as being able to distinguish sounds that may signal danger, even at longer distances)",
    "action": "Varies. Reactively hearing something does not require an action, if actively trying to listen to something that was not detected previously that's a move action.",
    "try_again": "Yes. You can try to hear something that you failed to hear previously with no penalty.",
    "special": [
        {
            "name": "Alertness feat",
            "description": "If you have the Alertness feat, you get a +2 bonus on Listen checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Alertness",
                "value": 2
            }
        },
        {
            "name": "Ranger Listen bonus",
            "description": "A ranger gains a bonus on Listen checks when using this skill against a favored enemy.",
            "data": {
                "bonus_type": "favored_enemy"
            }
        },
        {
            "name": "Racial Bonus",
            "description": "An elf, gnome, or halfling has a +2 racial bonus on Listen checks.",
            "data": {
                "bonus_type": "racial",
                "race": [
                    "elf",
                    "gnome",
                    "halfling"
                ],
                "value": 2
            }
        },
        {
            "name": "Half-elf Bonus",
            "description": "A half-elf has a +1 racial bonus on Listen checks.",
            "data": {
                "bonus_type": "racial",
                "race": "half-elf",
                "value": 1
            }
        }
    ],
    "synergy": [],
    "restriction": "If sleeping then this takes a penalty.",
    "untrained": "Untrained characters can hear loud noises or identify clear sources, though will find it difficult to discern specific patterns, messages, and/or origins, taking added difficulty when actively listening or doing something that implies specific or trained usage."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\martiallore.json
{
    "name": "Martial Lore",
    "description": "Use this skill to identify martial maneuvers as soon as they are initiated.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can identify maneuvers and disciplines used by a combatant by successfully doing checks related to that action or event, including when seeing an event (a character initiating such an ability/attack or an associated training pattern/technique) or when analyzing a recording from an earlier usage. Specific difficulty depends on the specific move and its proficiency.",
    "action": "Varies. Usually no action unless when identifying an ancient script about it, a full round is required for such use.",
    "try_again": "See descriptions. It cannot be tried again unless with a new source or attempt.",
    "special": [
        {
            "name": "Swordsage Martial Lore",
            "description": "A swordsage gains a +2 bonus on a Martial Lore check involving a maneuver in a discipline in which he has discipline focus.",
            "data": {
                "bonus_type": "class",
                "class": "swordsage",
                "value": 2
            }
        }
    ],
    "synergy": [],
    "restriction": "Must be trained.",
    "untrained": "Not possible."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\movesilently.json
{
    "name": "Move Silently",
    "description": "Use this skill to sneak up behind an enemy or to slink away without being noticed.",
    "key_ability": "Dex",
    "trained_only": false,
    "armor_check_penalty": true,
    "check": "Your Move Silently check is opposed by the Listen check of anyone who might hear you. You can move up to one-half your normal speed at no penalty. When moving at a speed greater than one-half but less than your full speed, you take a -5 penalty. It's practically impossible (-20 penalty) to move silently while running or charging.",
    "action": "Usually none, it is performed when making an action. See special section for actions where Move Silently become a check.",
    "try_again": "Yes if a condition has been changed or after being seen. The user cannot keep moving silently if observed",
    "special": [
        {
            "name": "Familiar Bonus",
            "description": "The master of a cat familiar gains a +3 bonus on Move Silently checks.",
            "data": {
                "bonus_type": "familiar",
                "familiar_type": "cat",
                "value": 3
            }
        },
        {
            "name": "Halfling racial bonus",
            "description": "A halfling has a +2 racial bonus on Move Silently checks.",
            "data": {
                "bonus_type": "racial",
                "value": 2
            }
        },
        {
            "name": "Stealthy feat",
            "description": "If you have the Stealthy feat, you get a +2 bonus on Move Silently checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Stealthy",
                "value": 2
            }
        }
    ],
    "synergy": [],
    "restriction": "May not be used without appropriate equipment for reducing sound output.",
    "untrained": "Without training or similar methods/items that aid the skill user will generate some kind of noticeable sound"
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\openlock.json
{
    "name": "Open Lock",
    "description": "Use this skill to pick padlocks, finesse combination locks, and solve puzzle locks. ",
    "key_ability": "Dex",
    "trained_only": true,
    "armor_check_penalty": true,
    "check": "You can open padlocks, finesse combination locks, and solve puzzle locks by doing an appropriate test. If you do not meet the challenge by that value you can use a quick check but it implies additional penalties. ",
    "action": "Opening a lock is a full-round action. Quicker actions impose an additional DC.",
    "try_again": "Yes, but a retry will have higher DC values for attempting to force or unlock it quicker. Or it might take more time to reapply or redo it.",
    "special": [
        {
            "name": "Nimble Fingers Feat",
            "description": "If you have the Nimble Fingers feat, you get a +2 bonus on Open Lock checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Nimble Fingers",
                "value": 2
            }
        }
    ],
    "synergy": [],
    "restriction": "This skill needs to be trained.",
    "untrained": "Untrained characters cannot open locks, they can use physical brute force instead, possibly damaging its interior."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\performact.json
{
    "name": "Perform (Act)",
    "description": "Use this skill for comedy, drama, mime and other similar methods of acting.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Perform (Act) uses dramatic abilities and interpretations to create or portray stories or characters or simply acting as required. The skill also represents ability at putting on a show.",
    "action": "Performing usually takes 1 hour or more but also has short (instant or short, round-based) applications to test reaction/ability for the same skill.",
    "try_again": "Yes, but repeated performance for a similar audience may have diminishing returns unless done properly or through special effects (or if a large amount of time passes or through an improvement on existing data for their character/ability/item). If used for creating an experience a new set of tries requires also different implementations and a fresh set of materials.",
    "special": [],
    "synergy": [],
    "restriction": "No explicit restrictions. For using that on specific class powers check the rules of those if any hardcoded interaction exist. All other actions rely solely on what data/rules have been established here with dynamic calls.",
    "untrained": "You can perform a show without specific training but you may be unappealing or just ineffective if not done in a proper manner with proper technique/equipment and experience, if applicable"
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\performcomedy.json
{
    "name": "Perform (Comedy)",
    "description": "Use this skill for buffoonery, limericks, joke-telling and other types of performance where the user intends to produce amusement and laughter.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "The user can entertain with buffoonery, joke-telling, limericks, using verbal or physical methods or actions (as implemented through data if any dynamic file contains it and through relevant engine behaviors or functions, in code), all as an act or perform.",
    "action": "The checks represent the skill used in those categories, often takes hours or rounds to properly establish a show, depending on its level.",
    "try_again": "Yes, but retries can reduce its intended effect, such as being received poorly if overused, or generating a more skeptical/less amused response for a similar audience or set of targets",
    "special": [],
    "synergy": [],
    "restriction": "No explicit restrictions but using that as a way of obtaining or managing information or data through its structure or hardcoded functionality or code.",
    "untrained": "An untrained character may not produce any intended effect when using those or create the kind of desired emotional response or information transfer to the audience if using this untrained."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\performdance.json
{
    "name": "Perform (Dance)",
    "description": "Use this skill for ballet, waltz, jig and other artistic dance expressions and choreographies using precise movement.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "The character performs dances using various steps or rhythmic and bodily gestures and poses. Can be done with instruments if appropriate for the scene or using visual-based actions to engage their audience, usually through complex choreographed techniques.",
    "action": "Performing dance generally takes hours to develop routines, and the implementation requires using data and visual information that the engine fetches and handles as they're called for when displaying characters, actions and the scene.",
    "try_again": "Yes but a previously disinterested audience might be more prejudiced or have low morale as a consequence from any attempt to regain their attention by retrying the same act. Any variation would count as a new attempt though (like changing or varying pace, music, moves etc).",
    "special": [],
    "synergy": [],
    "restriction": "Perform(Dance) relies on dexterity for movement. Slow characters or classes are usually bad at these performances, unless specific exceptions exist for those, based on their data files, that can improve such performance by also impacting on checks with relevant functions or with relevant special categories that were implemented or used.",
    "untrained": "Untrained performances are clunky and often result in an undesired output with limited engagement or influence on the observer, or just an underwhelming display without technique or grace."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\performkeyboardinstruments.json
{
    "name": "Perform (Keyboard Instruments)",
    "description": "Use this skill to create musical performances with a harpsichord, piano, pipe organ, or similar keyboard instruments.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Performs with the piano, pipe organ, or any other instrument in this category (with or without vocals) using musical knowledge and technique.",
    "action": "Performs takes at least several rounds, hours or even whole days depending on how much information and/or planning and complexity they have for those performance.",
    "try_again": "Yes, but after multiple retries and failures audiences may be less inclined to watch/listen to their performance unless improved or unless the context or format is drastically changed. Specifics apply depending on location, and type of show being used. If using magic as an aid check those spells descriptions or powers to avoid specific incompatibilities. An unimpressed audience has limited or zero return for repeated performances if those don't show some changes.",
    "special": [],
    "synergy": [],
    "restriction": "To use them you need specific, properly sized keyboard equipment for each, since they are all quite different in size, mechanics and even playing styles (organs tend to be more architectural and difficult to relocate). Without those they'd provide reduced power and control.",
    "untrained": "Untrained individuals may make use of those but usually won't sound like proper/well implemented songs/tunes."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\performoratory.json
{
    "name": "Perform (Oratory)",
    "description": "Use this skill to express yourself in speeches, epic storytelling, delivering odes, recitations, and any other method that uses vocals (and some times, text, using notes/writings)",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Use your speech or voice as the central point to create epic, stories or speeches to impact audiences using persuasive, expressive, poetic or dramatic speech or reciting. It can be accompanied by music, other acts, dancing or simple speeches and stories (or tales/fables)",
    "action": "Delivering any type of message that has structure/depth will take hours if those aren't a simple or clear message and will rely on how much data and how much effort needs to be delivered and/or the quality of such production.",
    "try_again": "Yes but a failed message or a story delivered badly is very hard to retell or try to fix or re-apply unless there's significant changes, usually for very few positive returns on the following attempts, and some data may even change and not for the better.",
    "special": [],
    "synergy": [],
    "restriction": "Perform(Oratory) depends on eloquence, diction and memory. An untalented person (low charisma, low inteligence, bad constitution for holding breath during delivery) might perform those skills with little success. This skill may become harder depending on external conditions (wind, storms, if underground, or lack of resources). Some skills require preparation before delivering such content, if this hardcoded feature gets properly called/used dynamically",
    "untrained": "Untrained speakers might still make some impression in smaller audiences (with no previous experiences on a high level) using personal experiences or knowledge but lack any relevant structure, rhythm, quality or information depth or delivery power (as would otherwise be used for a high trained performer), or with more complex or engaging structures that provide the best performances for each occasion/place"
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\performpercussioninstruments.json
{
    "name": "Perform (Percussion Instruments)",
    "description": "Use this skill to express your artistic talents through drumming, use of bells, gongs, and other percussion based instruments that depend on rhythmic movement or timing of your hits (and its interaction) in their composition.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Perform with percussive instrument, by hitting it, with the hand or some implement and creating rhythms with the given data set/type (or similar) that's specified to the hardcoded feature through file structure and/or calls using categories as we did throughout this explanation, also in the `special` category).",
    "action": "Performs can be for minutes, hours, or entire nights for specific types or performances and might require previous tests or training to handle this (including the hardcoded call to load relevant `json` data and assets such as instruments and icons, and also check on those). A standard check uses just the action for their implementation with dynamic files, for the intended functionality (if any).",
    "try_again": "Yes, but with each repeated action audiences may become less susceptible to that specific beat or tune. An expert player will also seek out to improvise or improve their implementation of these to impress listeners.",
    "special": [],
    "synergy": [],
    "restriction": "To use a particular drum or instrument properly (to produce proper sound quality and rhythmic variations or patterns and to control it properly with those movements and/or patterns), one needs an appropriate knowledge and mastery of specific methods. Lacking proper training, users will not be able to have more complex or more nuanced results from a performance.",
    "untrained": "An untrained character may be able to use a percussion instrument but it might come off as badly implemented or badly designed, making for poor listening experience due to the lack of proper pacing or rhythms/melodies if they attempt a composition instead of simple percussions and so on, including for handling a particular category of instrument with similar hardcoded calls, functions, engine methods and implementation."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\performsing.json
{
    "name": "Perform (Sing)",
    "description": "Use this skill to sing a ballad, chant, melody and any type of vocal artistic expression using your voice as the primary source for artistic interpretations or for delivering specific emotions, content or to portray certain characters. As with the rest of these, it requires mastery to do it properly.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "You can deliver a song, poem or specific vocal data (rhythmic/not) through the act of singing, with any degree of skill, but that requires a combination of musical expertise and knowledge of techniques.",
    "action": "This can be instantaneous for a simple tone or action but takes at least a few rounds to perform a proper act with relevant complexity or any kind of dynamic changes that you choose for your characters. Creating songs may take much longer.",
    "try_again": "Yes but repetition with an unchanging performance will greatly diminish or nullify any intended effects. Improvisations and modifications with those structures and melodies would count as new checks or, if using those through hardcoded features and specific methods and dynamic data structures/types (following our established pattern, especially for dealing with dynamic `json` categories).",
    "special": [],
    "synergy": [],
    "restriction": "Performance is hard without a functional voice and knowledge on rhythm, voice pitch, tone control and so on. Some performances rely heavily on previous experience. For using magic with those checks make use of class requirements and restrictions as well (implementing them dynamically if not done previously by checking specific ids). Use hardcoded files to follow the general design of your file system, and dynamic file integration with those.",
    "untrained": "Without previous knowledge and training or an affinity to performance, these may lead to extremely poor renditions that are poorly delivered, with little connection with your targeted audiences/beings or what is intended from the singer. It could even be a disservice if not used properly. But for a placeholder version these, like any other example so far, should do fine until better features are implemented with other functions."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\performstringinstruments.json
{
    "name": "Perform (String Instruments)",
    "description": "Use this skill to express your artistic talents with a fiddle, harp, lute, mandolin, or similar string-based instrument.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Play various types of musical instrument using plucked or other types of string activation to produce sounds that resonate across space. Each style, and use may result in different ways of applying your skills with their given behaviors.",
    "action": "Requires some rounds (if fast checks are desired) to implement an effective composition (i.e., short, simple musical pieces), hours or whole days for complex performance. If you decide to play a song that must follow certain rules and methods (if any), follow these as a baseline implementation (like with bard spells or any specific content that must be used in order to have these actions work as designed)",
    "try_again": "Yes, but you must have the energy (physical and mental) to provide it and the audience might be already used to your play style. By using the same technique/composition a performance becomes less appealing for the same crowd if no changes occur (unless performing the most basic forms for specific data sets with minimal interaction)",
    "special": [],
    "synergy": [],
    "restriction": "Requires a certain knowledge of how strings, finger or playing technique must be to provide their effects. Each instrument and implementation can vary according to style or implementation as intended for it within the code through specific IDs or a constructor to load up dynamically created or user defined types or through calls to data through similar formats like we previously designed. Lacking the understanding on specific details, techniques or procedures those implementations, calls, behaviors will likely cause severe usage penalties",
    "untrained": "An untrained character may use stringed instruments but often lack finesse or even correct notes/tunes/composition to make it anything enjoyable (or to produce a proper effect when using these as requirements for other classes or other magic abilities that use instruments as their implementation of actions, if those rules are called for)."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\performwindinstruments.json
{
    "name": "Perform (Wind Instruments)",
    "description": "Use this skill to perform music using flutes, pan pipes, recorders, shawms, trumpets or any other type of wind-based instruments, requiring a combination of bodily controls, breathing methods, and similar techniques that require special care.",
    "key_ability": "Cha",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "This involves musical techniques such as breathing controls to create wind instrument performances such as with flutes, recorders, panpipes and similar, by understanding their musical data sets, their particular notes or any other special ability you wish to create. If used for bard music (as per previous rules) implement the hardcoded structure or by linking your hardcoded functionalities (such as UI data displaying the available spells through specific keys within your created .json and files, under this folder as an example, to trigger them), as implemented throughout our project by always following and adapting to that.",
    "action": "Usually takes from rounds up to entire days of performance with breaks for better (and higher quality, longer) performances that require special care and skills (that follow previously established methods) and calls through any given format or type, with data properly used and called within the game using previously built categories and paths or by loading that up from hardcoded sections/engine procedures.",
    "try_again": "Yes, though repetitive behaviors will generate poor responses if there isn't a different performance and new content, from what is considered usual. Those previous hardcoded parameters, categories or even specific file formats (for dynamically loaded content with different names, ids, structures) may help or harm your dynamic, user defined, custom performance data or files if you generate or call for data improperly. Such performances often are tied to time and cannot just repeat on a specific scenario/occasion and if they can that is usually for testing, placeholders, and hardcoded test values.",
    "special": [],
    "synergy": [],
    "restriction": "Specific types may also have a level of complexity for those lacking required breath capacity or specialized organs and bodies or skills or that are prone to errors or bad performance in noisy locations, as determined through specific hardcoded functionality or in previously used examples, through data under relevant categories within our folders such as using the id/names, structure or any data field.",
    "untrained": "You can perform, using air and holes/chambers in those types of instruments, though that may sound less desirable/complex or even less pleasant/coherent as you do this. Hardcoded values in those instrument types also require that certain procedures (hardcoded functionalities within the code that fetches that data through specific methods, such as an ID in your json structure and a constructor to load it dynamically as intended). With poor, unpracticed method, even the basic functions might not be accessible without some type of implementation that forces this implementation/call/loading."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\profession.json
{
    "name": "Profession",
    "description": "You are trained in a livelihood or a professional role, such as apothecary, boater, bookkeeper, brewer, cook, driver, farmer, fisher, guide, herbalist, herder, hunter, innkeeper, lumberjack, miller, miner, porter, rancher, sailor, scribe, siege engineer, stablehand, tanner, teamster, woodcutter, or the like.",
    "key_ability": "Wis",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can practice your trade and make a decent living, earning about half your Profession check result in gold pieces per week of dedicated work. You know how to use the tools of your trade, how to perform the profession's daily tasks, how to supervise helpers, and how to handle common problems.",
    "action": "Not applicable. A single check generally represents a week of work. You also need to be in a context/area to do those, depending on each trade.",
    "try_again": "Varies. An attempt to use a Profession skill to earn an income cannot be retried. You are stuck with whatever weekly wage your check result brought you.",
    "special": [],
    "synergy": [],
    "restriction": "Requires having a specialized background or tools. The amount and detail of tasks for that area may limit who uses the profession with some or no access to some special skills. For example, blacksmithing, or medicine or magic related professional categories will usually require training/specific features/implementations of such",
    "untrained": "An untrained user may attempt those skills but their limited usage/implementation will make that unreliable and have limited (or no) access to tools/locations required to generate a positive output."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\psicraft.json
{
    "name": "Psicraft",
    "description": "Use this skill to identify powers as they are manifest or powers already in place, as well as items with such traits.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can identify powers and psionic effects. DC varies according to the task, ranging from detecting powers to their intended function (as well as devices that uses those psionic features, like psionic tattoos and other specialized objects)",
    "action": "Varies. Generally does not take an action (for detecting those when manifested or present).",
    "try_again": "See above. You can't reuse the knowledge you gathered at first try without more info/usage or testing. A given encounter will use the data obtained in that situation but a new one may change that if something in that encounter changes your implementation or code or hardcoded call for said check using previously described behaviors for handling errors and data validation through IDs (item IDs, or custom values under user created folders and data).",
    "special": [],
    "synergy": [
        {
            "skill": "Use Psionic Device",
            "bonus": "+2 bonus on Psicraft checks to address power stones."
        },
        {
            "skill": "Knowledge (psionics)",
            "bonus": "+2 bonus on Psicraft checks."
        }
    ],
    "restriction": "Specific usage, features or rules depending on the object or power you're analyzing or trying to access/use.",
    "untrained": "Untrained characters can sense the presence of mind-based abilities but have difficulties determining those's characteristics without any prior training."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\ride.json
{
    "name": "Ride",
    "description": "You can ride a mount, be it a horse, riding dog, griffon, dragon, or some other kind of creature suited for riding.",
    "key_ability": "Dex",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Typical riding actions don't require checks unless trying more complex actions such as making combat related attacks (using it as a mount in combat). Also used to jump into or swim underwater and many similar situations for when specific mount abilities and functions or rules and restrictions to that become available (through items or classes). Those rules might become enforced/implemented using specific checks for dynamic files using these data to call them in appropriate functions/methods or by hardcoded methods (for special actions such as attacks with the mounted unit and related engine procedures that apply that functionality using existing game elements and classes).",
    "action": "Mounting, dismounting is a move action. Several tests require you to make reaction tests in order to remain on it (without any further penalty), when you fall, etc.",
    "try_again": "No. Unless the character gets out of its mounting and attempt it again with all related hardcoded limitations as planned.",
    "special": [
        {
            "name": "Animal Affinity Feat",
            "description": "If you have the Animal Affinity feat, you get a +2 bonus on Ride checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Animal Affinity",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Handle Animal",
            "bonus": "+2 bonus on Ride checks"
        }
    ],
    "restriction": "Some creatures are more or less apt to be used as mounts, making these more or less challenging based on type. Or to control and steer as you see fit and as described on previous steps in this list.",
    "untrained": "Basic riding can be achieved with untrained skill users but they might suffer sever penalties while in more complicated actions such as trying to avoid obstacles, combat encounters or controlling that unit through difficult conditions."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\search.json
{
    "name": "Search",
    "description": "You can find secret doors, simple traps, hidden compartments, and other details not readily apparent. The Spot skill lets you notice something, such as a hiding rogue. The Search skill lets a character discern some small detail or irregularity through active effort.",
    "key_ability": "Int",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Use this skill to look for hidden things (such as doors or simple traps, or other less common/obvious features). It is also required for locating items, objects, mechanisms or detecting magical forces if they exist.",
    "action": "It takes a full-round action to search a 5-foot-by-5-foot area or a volume of goods 5 feet on a side.",
    "try_again": "Yes, with new searches, through different angles/views and by changing methods for searching and exploring (as implemented through code if you design any dynamic data that does that), by doing a more careful or thorough implementation/procedure.",
    "special": [
        {
            "name": "Racial Search Bonus",
            "description": "An elf has a +2 racial bonus on Search checks, and a half-elf has a +1 racial bonus.",
            "data": {
                "bonus_type": "racial",
                "elf_value": 2,
                "half-elf_value": 1
            }
        },
        {
            "name": "Investigator Feat",
            "description": "If you have the Investigator feat, you get a +2 bonus on Search checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Investigator",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Survival",
            "bonus": "+2 bonus on Search checks to follow tracks."
        },
        {
            "skill": "Knowledge(architecture and engineering)",
            "bonus": "+2 bonus on Search checks to find secret doors or hidden compartments"
        }
    ],
    "restriction": "Only rogues, and other characters with trapfinding can attempt disabling magic traps and devices or for detecting specific types of structures, unless a feature from a spell is in effect.",
    "untrained": "Without training, the search skill provides very basic and poor detection in most cases. Without any knowledge/training with these, the result is also unreliable for the user (or other characters) even with favorable conditions. This also has an important effect when dealing with hardcoded behavior."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\sensemotive.json
{
    "name": "Sense Motive",
    "description": "Use this skill to tell when someone is bluffing you, to discern hidden messages in conversations, or to sense when someone is being magically influenced. This skill represents sensitivity to the body language, speech habits, and mannerisms of others.",
    "key_ability": "Wis",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Your Sense Motive skill lets you detect lies, and discern how another person is actually acting as well as their general mood or trustworthiness by analyzing several factors such as their behavior. Also, for detecting enchantments or other influences upon a character and how it will impact your interaction.",
    "action": "Trying to gain information with Sense Motive generally takes at least 1 minute. Assess Opponent can be done through a single, specific, defined action during a given turn, if a character makes the necessary checks, data calls and performs those through implemented functionalities within your engine.",
    "try_again": "No. A user can only obtain data through that single interpretation (unless additional clues or context change the data as understood through other checks, implementations or abilities from classes or equipment). A retry with same data won't produce anything new.",
    "special": [
        {
            "name": "Ranger bonus",
            "description": "A ranger gains a bonus on Sense Motive checks when using this skill against a favored enemy.",
            "data": {
                "bonus_type": "favored_enemy"
            }
        },
        {
            "name": "Negotiator Feat",
            "description": "If you have the Negotiator feat, you get a +2 bonus on Sense Motive checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Negotiator",
                "value": 2
            }
        },
        {
            "name": "Combat Intuition feat",
            "description": "The Combat Intuition feat grants a +4 bonus on Sense Motive checks made to assess opponents.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Combat Intuition",
                "value": 4
            }
        }
    ],
    "synergy": [
        {
            "skill": "Diplomacy",
            "bonus": "+2 bonus on Diplomacy checks."
        }
    ],
    "restriction": "Characters without sight (and without echolocation or similar), will usually be severely impacted in its usage as well as those creatures or individuals that are immune to emotions or body languages or who don't express those at all, either by lacking any visible sign, through a physical issue, or through a magical condition, may prove difficult to apply that ability. They usually take significant or high penalties depending on conditions",
    "untrained": "Without training users can usually identify extreme examples of untruth but with no accuracy or reliability to understand the nuances or the intent behind someone else's words."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\sleightofhand.json
{
    "name": "Sleight of Hand",
    "description": "You can cut or lift a purse and hide it on your person, palm an unattended object, hide a light weapon in your clothing, or perform some feat of legerdemain with an object no larger than a hat or a loaf of bread.",
    "key_ability": "Dex",
    "trained_only": true,
    "armor_check_penalty": true,
    "check": "With Sleight of Hand, you can steal an object from a person without them knowing (or not) by doing checks opposed to those targeted to you. Palming an unattended coin or doing simple magic tricks may be enough with minimal effort.",
    "action": "Usually, each use requires at least a standard action.",
    "try_again": "Yes, but with each failure, your next attempt will carry higher DC's with those hardcoded penalties as implemented by previously used files/formats if they follow what was established for categories within `content/` such as when generating items with a given Id (and how this affects gameplay such as using that Id to define weapon proficiency for specific categories of characters or with custom item/file creations)",
    "special": [
        {
            "name": "Deft Hands Feat",
            "description": "If you have the Deft Hands feat, you get a +2 bonus on Sleight of Hand checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Deft Hands",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Bluff",
            "bonus": "+2 on Sleight of Hand checks"
        }
    ],
    "restriction": "A user can use a ranged or light weapon or other similarly small items with relative ease but it may have restrictions on the use of two-handed weapons or specific types (if used by hardcoded features within the game)",
    "untrained": "It requires previous expertise to handle with efficiency so untrained usage might trigger additional checks or unwanted behavior such as falling or breaking items. Those skills can still be applied for simple tasks."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\speaklanguage.json
{
    "name": "Speak Language",
    "description": "The Speak Language skill doesn't work like other skills. Languages are usually a starting point or are acquired when advancing in class levels or by purchasing these directly (you learn those by practice and studying, which may use other types of knowledge)",
    "key_ability": "None",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "It does not use any check, but its functionality and rules are described as a specific set of requirements to learn and master new languages.",
    "action": "Not applicable. Using new languages for magic might also require training to combine both aspects and use them through appropriate engine implementations using existing methods as previously implemented/planned for items, characters, locations and more, to keep it compatible.",
    "try_again": "Not applicable.",
    "special": [],
    "synergy": [],
    "restriction": "Characters who haven't become literate yet or that cannot be heard can't speak using specific spoken languages. Other methods to speak, such as by signs or gestures can bypass those but with an inherent penalty if done to characters that use or hear speech by normal means, which needs specialized hardcoded engine functionality or file parsing implementation through custom/generated user content. Those should always take all dynamic/user created data/implementations into consideration.",
    "untrained": "Without training users cannot fully read/write in a new language but they may attempt a partial, though likely to be faulty/misinterpreted, usage."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\spellcraft.json
{
    "name": "Spellcraft",
    "description": "Use this skill to identify spells as they are cast or spells already in place. The Spellcraft skill allows you to use, detect and analyze all types of spells, spell-like abilities or other magic manifestations or their results.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can use this skill to understand spells as they are cast or as effects that are already working, usually following previously existing game, magic and spell implementation or creation/modification. Spells with components such as a verbal one are much easier to be perceived. Reading and/or deciphering written spells (scrolls, etc.) might require specialized training as well, with extra rules that rely on how the player characters use that information through a spellcaster class.",
    "action": "Varies, depending on how complex a spell effect or data becomes. Also depends on any type of procedure that makes the game perform/use that check/action, for which an engine feature or custom constructor will then take care of their particular/relevant details as implemented with all data handling functionalities and files.",
    "try_again": "No. Once information about a magic effect or specific casting process was detected it will not be rediscovered without additional tests or knowledge (if used through hardcoded procedures such as spell learning) to correctly parse or to access such kind of knowledge unless the original method or implementation has specific calls/logic to allow further implementations for different spells.",
    "special": [
        {
            "name": "Specialist Wizard bonus",
            "description": "If you are a specialist wizard, you get a +2 bonus on Spellcraft checks when dealing with a spell or effect from your specialty school. You take a -5 penalty when dealing with a spell or effect from a prohibited school (and some tasks, such as learning a prohibited spell, are just impossible).",
            "data": {
                "bonus_type": "specialization",
                "school_type": "wizard",
                "special_value": 2,
                "prohibited_value": -5
            }
        },
        {
            "name": "Magical Aptitude feat",
            "description": "If you have the Magical Aptitude feat, you get a +2 bonus on Spellcraft checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Magical Aptitude",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Knowledge (arcana)",
            "bonus": "+2 bonus on Spellcraft checks"
        },
        {
            "skill": "Use Magic Device",
            "bonus": "+2 bonus on Use Magic Device checks related to scrolls."
        },
        {
            "skill": "Decipher Script",
            "bonus": "+2 bonus on Spellcraft checks to identify the effects of a rune circle"
        }
    ],
    "restriction": "It relies on your training, magical attunement, experience and also can rely on a hardcoded file/path or data format within your dynamically created data structure or within other game behaviors. These specific behaviors require specific class types to access/make usage or their effects (especially if those spells use magic or are class or level-specific with specific conditions for said use).",
    "untrained": "You may sense magic and some general features but details and specific functionality will always elude untrained individuals. Also it requires knowledge on magic for understanding those systems so specific data will only be detected (or activated/used through it), when proper knowledge has been learned."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\spot.json
{
    "name": "Spot",
    "description": "Use this skill to notice bandits waiting in ambush, to see a rogue lurking in the shadows, to see through a disguise, to read lips, or to see the monstrous centipede in the pile of trash. Detect those who might want to hide and objects or elements within your vision range (or using other specific abilities and enhancements) as described through hardcoded methods or dynamic data as presented in a file through an associated category and a type, id, or name of the file.",
    "key_ability": "Wis",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "Your Spot check is either made to detect something (by checking a relevant static difficulty) or through opposition with a stealth check or disguise. It allows detecting other characters who are hiding or something from a certain range. As a consequence you may react quicker than a usual untrained user would. Certain types of characters may have advantages or better implementations/usage due to training, spells or race.",
    "action": "Varies. Spot is mostly reactive so does not usually require a dedicated action (and the hardcoded implementation for checking if anything is spotted works through any other behavior that triggers that detection method). If you use your actions with a Spot focus those, such as using Spot to discern what something actually is or their hidden properties or actions it takes some actions (full-round if intense focus, or longer periods, to fully discern the needed data/elements to create conclusions about that)",
    "try_again": "Yes but it's limited by your current field of vision and you cannot detect what you cannot see and therefore, can not perform another search to gain additional or other data by checking again that source again (unless with additional knowledge, features, powers and magic). Also you can try to re-check what a given disguise was using those procedures but can also run into new traps and misleading signals.",
    "special": [
        {
            "name": "Alertness Feat",
            "description": "If you have the Alertness feat, you get a +2 bonus on Spot checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Alertness",
                "value": 2
            }
        },
        {
            "name": "Ranger bonus",
            "description": "A ranger gains a bonus on Spot checks when using this skill against a favored enemy.",
            "data": {
                "bonus_type": "favored_enemy"
            }
        },
        {
            "name": "Elf Bonus",
            "description": "An elf has a +2 racial bonus on Spot checks.",
            "data": {
                "bonus_type": "racial",
                "race": "elf",
                "value": 2
            }
        },
        {
            "name": "Half-elf bonus",
            "description": "A half-elf has a +1 racial bonus on Spot checks.",
            "data": {
                "bonus_type": "racial",
                "race": "half-elf",
                "value": 1
            }
        },
        {
            "name": "Familiar Bonus (hawk)",
            "description": "The master of a hawk familiar gains a +3 bonus on Spot checks in daylight or other lighted areas.",
            "data": {
                "bonus_type": "familiar",
                "familiar_type": "hawk",
                "value": 3,
                "area_type": "lighted"
            }
        },
        {
            "name": "Familiar Bonus (owl)",
            "description": "The master of an owl familiar gains a +3 bonus on Spot checks in shadowy or other darkened areas.",
            "data": {
                "bonus_type": "familiar",
                "familiar_type": "owl",
                "value": 3,
                "area_type": "darkened"
            }
        }
    ],
    "synergy": [],
    "restriction": "Magic, conditions or powers, darkness, high noise areas and similar external or internal sources might make those difficult to implement or less effective (with those using that dynamically generated, hardcoded data for a more granular experience), for all users (depending on implementation in code for each). This will influence, too, when dealing with hidden/stealthed characters (if those abilities are hardcoded into the skill). As well as to spot what it's used to make its appearance through any file usage you design with categories, IDs or relevant file types for graphics, sounds and other resources in the code/game.",
    "untrained": "A basic sense of the environment is present even if untrained, although you'd usually only detect things with extremely blatant signs such as if an entity does a sudden movement, speaks very loud, has an extremely distinct form or appearance, a highly identifiable/distinguished type of sound (as if, they are purposely creating such an effect) or if something from the environment calls your attention (large changes in lighting or color or with visible movement)."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\survival.json
{
    "name": "Survival",
    "description": "Use this skill to follow tracks, hunt wild game, guide a party safely through frozen wastelands, identify signs that owlbears live nearby, predict the weather, or avoid quicksand and other natural hazards. This includes usage of terrain to obtain or avoid combat or dangerous areas, to recognize or to predict natural phenomena that impact travel or hunting activities and all kinds of interactions between man and nature (plants, creatures, areas, climate, weather and similar).",
    "key_ability": "Wis",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "You can use this skill to stay safe in wilderness conditions and other harsh or unfavorable terrain by getting food, creating shelter and also predict/understand weather conditions or the terrain itself for tracking down specific creatures. When trained, users of this skill may get a relevant boost in performance that isn't applicable to untrained characters.",
    "action": " Varies, for performing most tasks like for predicting weather, making safe shelters or providing for yourself and others it requires a whole day or part of a full-day cycle of work. Other situations require specific actions as a test or reaction or when moving into dangerous territory, in those situations you have an automatic reaction.",
    "try_again": "Yes. Though it's limited, or has diminished returns. Also if a check for identifying or following trails has failed there might not be an option for doing a retake.",
    "special": [
        {
            "name": "Self-Sufficient feat",
            "description": "If you have the Self-Sufficient feat, you get a +2 bonus on Survival checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Self-Sufficient",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Search",
            "bonus": "+2 on Survival checks to find or follow tracks."
        },
        {
            "skill": "Knowledge(nature)",
            "bonus": "+2 bonus on Survival checks made in aboveground natural environments (aquatic, desert, forest, hill, marsh, mountains, and plains)."
        },
        {
            "skill": "Knowledge(geography)",
            "bonus": "+2 bonus on Survival checks made to keep from getting lost or to avoid natural hazards."
        },
        {
            "skill": "Knowledge(the planes)",
            "bonus": "+2 bonus on Survival checks made while on other planes."
        },
        {
            "skill": "Knowledge(dungeoneering)",
            "bonus": "+2 bonus on Survival checks made while underground."
        }
    ],
    "restriction": "Track is also necessary to follow specific types of traces/trails using Survival, for specific actions. Knowledge on other worlds and regions may be needed to navigate specific extra-planar locations as well.",
    "untrained": "Without training you can provide basic means for living, foraging and building a primitive shelter for protecting against some of the more mundane hazards (cold weather). You are usually lost, confused or overwhelmed in situations involving unknown regions, magic/planar forces or complex/unknown weather patterns."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\swim.json
{
    "name": "Swim",
    "description": "Using this skill, a land-based creature can swim, dive, navigate underwater obstacles, and so on. It also requires breath control, spatial understanding as well as understanding the local environment such as the tide or currents. Swimming includes going down/diving or going over obstacles (if jumping or otherwise performing actions to do so).",
    "key_ability": "Str",
    "trained_only": false,
    "armor_check_penalty": true,
    "check": "You make checks each turn while on the water. If these fail the creature may become overwhelmed by conditions or even fall under the water unless it makes other, new, specific attempts (as described).",
    "action": "If you do not attempt a quicker swimming action, you make that test each round, otherwise a move-equivalent action or a free-action depending on implementation.",
    "try_again": "Yes. You make that Swim test (or the required Constitution test) whenever that event triggers such actions.",
    "special": [
        {
            "name": "Athletic feat",
            "description": "If you have the Athletic feat, you get a +2 bonus on Swim checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Athletic",
                "value": 2
            }
        },
        {
            "name": "Endurance feat",
            "description": "If you have the Endurance feat, you get a +4 bonus on Swim checks made to avoid taking nonlethal damage from fatigue.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Endurance",
                "value": 4
            }
        }
    ],
    "synergy": [],
    "restriction": "Swim checks can be performed while wearing armor, though penalties will always apply. You can hold breath only so much, before your character might die through that attempt or action (which also relies on the implementation you give it when doing dynamic/hardcoded calls, file parsing and integration). If your species has a swimming special ability, their inherent skill bonus might give some advantages in most or all areas.",
    "untrained": "Untrained characters might still attempt this but it carries major drawbacks when attempting to traverse great distances or complex conditions as described."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\truespeak.json
{
    "name": "Truespeak",
    "description": "Use this skill to master the tortuous pronunciation of truenames, each of which involves a dozen syllables, precise timing, and vocalizations foreign even to the most multilingual character. Only a truenamer class uses that as a core ability/feature (that calls other behaviors and implementations from a character using said ability). Spell casters who try to cast spells of that specific kind must rely on a similar knowledge with proper training and by passing through those related checks. You also have access to more specialized use cases depending on the implemented engine calls with those.",
    "key_ability": "Int",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can pronounce the truename of a creature or an object by succeeding on a Truespeak check. Speaking a creature's personal truename increases the DC.",
    "action": "Speaking a truename is a standard action. But it's used to power other special actions (such as spellcasting with truenames), it's considered as part of other action's time.",
    "try_again": "Yes, for normal or less significant types, for special, harder to understand cases, or when dealing with unknown origins, locations and beings a second try or attempt may fail. In these specific situations the power used might require a specific implementation in code and file usage for calling specific names, paths and effects (if they are triggered by using data on other, different file categories or even by implementing them directly using our hardcoded categories)",
    "special": [
        {
            "name": "Personal truename",
            "description": "You gain a +4 competence bonus on Truespeak checks for saying your own personal truename.",
            "data": {
                "bonus_type": "self",
                "value": 4
            }
        }
    ],
    "synergy": [
        {
            "skill": "Knowledge(Psionics)",
            "bonus": "+2 bonus on any Knowledge checks made to conduct truename research"
        }
    ],
    "restriction": "To make proper calls for this, you require training (through special feats or class), specific intonation, understanding, mastery of language, specific methods for delivering each name correctly or they might fail.",
    "untrained": "Without any prior understanding of a truename's nature, its implementation is close to impossible (without other outside magical or supernatural force/implementations/tools/abilities, which may help an untrained character in performing those calls and procedures that requires knowledge on Truename structure/use). An untrained attempt results in the user being utterly incapable to deliver its intended/required data for these actions."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\tumble.json
{
    "name": "Tumble",
    "description": "You can dive, roll, somersault, flip, and so on, usually for escaping an opponent or other physical obstacles or similar barriers or situations, using a series of complex acrobatic movements. This is more versatile and useful for mobile combat/interaction scenarios or exploration",
    "key_ability": "Dex",
    "trained_only": true,
    "armor_check_penalty": true,
    "check": "A Tumble check is used for many kinds of evasive actions including to fall with reduced damage, tumbling around, or for climbing or interacting in a location using agility or dexterity based jumps, rolls, twists or acrobatic routines.",
    "action": "Performing acrobatics requires at least a move action to properly control and handle those difficult/demanding types of physical movements.",
    "try_again": "Usually no, unless that results from a particular effect (that forces those retries due to specific engine mechanics).",
    "special": [
        {
            "name": "Agile feat",
            "description": "If you have the Acrobatic feat, you get a +2 bonus on Tumble checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Acrobatic",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Balance",
            "bonus": "+2 on Tumble checks."
        },
        {
            "skill": "Jump",
            "bonus": "+2 on Tumble checks."
        }
    ],
    "restriction": "To use these skills, users need to have both their mobility free as a movement with no limitations for movement (so any impediment through heavy/bulky gear, conditions, encumbrance may affect those results, following their specified rules, if implemented as such).",
    "untrained": "Users without prior training on complex bodily movements have low effectiveness and may face significant difficulty in trying to implement more complex or specialized actions that require technique, dexterity and specific timings that are acquired with time and experience (unless that gets replaced by other type of help or other specific data). Untrained tumble is similar to basic dodging, and can usually only be performed by specific class or race if that isn't their normal training such as when falling, and that can reduce falling damage (as designed, by having hardcoded or data defined behavior) or if some specific conditions or hardcoded exceptions to said rules exist. For such behavior to take effect on a trained or untrained player or other elements they may require specialized tests through previously implemented dynamic system, including through a set of specific procedures that might (or might not) trigger said behaviors."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\usemagicdevice.json
{
    "name": "Use Magic Device",
    "description": "Use this skill to activate magic devices, including scrolls and wands, that you could not otherwise activate. Use Magic Device lets you use a magic item as if you had the spell ability or class features of another class, as if you were a different race, or as if you were of a different alignment.",
    "key_ability": "Cha",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can use this skill to read a spell or to activate a magic item using a Use Magic Device check each time you activate it (or if it has a continuing effect). That might also allow emulating properties from race, classes, or even a certain alignment if your system intends that, with specific constructor calls through existing engine functionalities using relevant, appropriate or newly generated dynamic data to match that file behavior through hardcoded calls.",
    "action": "None. The Use Magic Device check is made as part of the action (if any) required to activate the magic item. If using the skill as a method to simulate spells, casting, or using an ability it will be based on that, using appropriate data and formats as you generate it (following examples)",
    "try_again": "Yes, but if you ever roll a natural 1 while attempting to activate an item and you fail, you can't try to activate that item again for 24 hours. Those restrictions also apply when reading from scrolls or similar magic items that call or perform checks (through those implementations within files or dynamic objects through their keys and/or methods).",
    "special": [
        {
            "name": "Magical Aptitude Feat",
            "description": "If you have the Magical Aptitude feat, you get a +2 bonus on Use Magic Device checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Magical Aptitude",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Spellcraft",
            "bonus": "+2 bonus on Use Magic Device checks related to scrolls."
        },
        {
            "skill": "Decipher Script",
            "bonus": "+2 bonus on Use Magic Device checks related to scrolls."
        },
        {
            "skill": "Spellcraft",
            "bonus": "+2 bonus to Spellcraft when identifying spells through Use Magic Device checks with those specific items such as with a scroll or by using wands through hardcoded procedures (that can be added with relevant keys or identifiers if they're generated through other dynamic file sources that use your intended procedures and code design)"
        }
    ],
    "restriction": "Must be trained, requires having the item/object, as well as understanding (if required) how that item functions/interacts or has to be used (including their components). Specific items, power stones, scrolls, wands, or magic implements require proficiency with the usage as detailed on previous texts.",
    "untrained": "Untrained characters can try to emulate powers but their implementation will most likely lead to severe side-effects such as triggering those improperly, having them produce no intended effect, activating their negative/curse or backfiring as well as potentially hurting the user with their uncontrolled powers."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\usepsionicdevice.json
{
    "name": "Use Psionic Device",
    "description": "Use this skill to activate psionic devices, including power stones and dorjes, that otherwise you could not activate.",
    "key_ability": "Cha",
    "trained_only": true,
    "armor_check_penalty": false,
    "check": "You can use this skill to address a power stone (to learn what powers are encoded on it) or to activate a psionic item by succeeding at Use Psionic Device checks, allowing emulating or using specific data from them (abilities, levels, items, spells, races, or similar categories and structures that can impact your dynamic content) by implementing hardcoded behaviors using said content through those calls and/or if relevant with any custom file structure you might have. All behaviors also should take that type of system for file access or hardcoded implementation to manage these psionic aspects",
    "action": "Varies depending on which item type/usage is selected, or on how your specific implementation dictates through code, when and where, that item data (and any hardcoded usage related to it through methods) should trigger or activate specific abilities, properties or rules using this, along the proper calls and functionalities you created.",
    "try_again": "Yes, but if you ever roll a natural 1 while attempting to activate an item and you fail, you can't try to activate it again for a day, as long as said system to prevent that is hardcoded and correctly used in that action/implementation.",
    "special": [
        {
            "name": "Psionic Affinity Feat",
            "description": "A character with the Psionic Affinity feat gets a +2 bonus on Use Psionic Device checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Psionic Affinity",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Psicraft",
            "bonus": "+2 on Use Psionic Device checks related to power stones."
        },
        {
            "skill": "Use Psionic Device",
            "bonus": "+2 on Psicraft checks to address power stones."
        }
    ],
    "restriction": "Must be trained on this ability, as well as by understanding how it interacts with your own abilities, power or class/item rules/systems (such as through categories). If using dynamic types or file names make sure to include specific procedures for managing and correctly loading this from file (and other hardcoded areas such as using an ID, that we've been mentioning since day 1) for usage or data management.",
    "untrained": "If used untrained, a psionic device might activate with uncontrolled, unwanted effects such as damage on user and lack of desired output due to misunderstanding on specific usage or parameters (like how power is implemented or handled through hardcoded parts and functions/implementations), due to that the device may misfire or trigger unintended (and dangerous) side-effects. May result on mental stress or brainburn from failing such implementations (depending on which hardcoded method was implemented for it, as per design)"
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\skills\userope.json
{
    "name": "Use Rope",
    "description": "With this skill, you can make firm knots, undo tricky knots, and bind prisoners with ropes.",
    "key_ability": "Dex",
    "trained_only": false,
    "armor_check_penalty": false,
    "check": "You can make firm knots, or tie someone or even control a rope for different types of movement/usage and you must have it available as a tool or through another skill that grants this ability for it to work properly.",
    "action": "Most usage, such as throwing hooks, making knots and so on is part of actions in-game (usually as a standard or move action, when relevant). Check descriptions to use or call that specific data if that implementation of a system/ability using data from files exists. The basic handling of the tool for those checks is included within the specific hardcoded implementation",
    "try_again": "Varies. A hard coded structure for using it might prevent trying that particular trick, action or behavior, from a dynamic file and its procedures, for specific times. Otherwise, redoing an attempt will trigger checks to perform that skill again using existing data as we established in this json implementation.",
    "special": [
        {
            "name": "Silk Rope Bonus",
            "description": "A silk rope gives you a +2 circumstance bonus on Use Rope checks.",
            "data": {
                "bonus_type": "equipment",
                "item": "silk rope",
                "value": 2
            }
        },
        {
            "name": "Animate Rope bonus",
            "description": "If you cast an animate rope spell on a rope, you get a +2 circumstance bonus on any Use Rope checks you make when using that rope.",
            "data": {
                "bonus_type": "magic",
                "value": 2,
                "item_type": "animate rope"
            }
        },
        {
            "name": "Deft Hands Feat",
            "description": "If you have the Deft Hands feat, you get a +2 bonus on Use Rope checks.",
            "data": {
                "bonus_type": "feat",
                "feat_type": "Deft Hands",
                "value": 2
            }
        }
    ],
    "synergy": [
        {
            "skill": "Climb",
            "bonus": "+2 on Climb checks made to climb a rope, a knotted rope, or a rope-and-wall combination"
        },
        {
            "skill": "Escape Artist",
            "bonus": "+2 on Escape Artist checks when escaping from rope bonds"
        },
        {
            "skill": "Escape Artist",
            "bonus": "+2 on Use Rope checks when attempting to bind another person with rope"
        }
    ],
    "restriction": "You cannot control, perform or interact with any effect of this, including bindings if without that tool available for its specific type (such as silk for better, improved use cases) if those behaviors were coded and implemented by calling hardcoded data from categories within the system.",
    "untrained": "Basic binding of other objects with rope may be achieved untrained, but may lead to weak or unstable structures, bad control/use of that rope or when attempting to perform actions with more challenging methods for handling ropes and complex knots or specialized behaviors/interactions using specific procedures for using a rope to tie a creature down, rappel or any other kind of method."
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\content\tileDefinitions.json
[
  {
    "symbol": "#",
    "name": "Wall",
    "isBlocking": true,
    "isTrigger": false,
    "tileColor": "brown",
    "tileChar": "#"
  },
  {
    "symbol": ".",
    "name": "Floor",
    "isBlocking": false,
    "isTrigger": false,
    "tileColor": "lightgray",
    "tileChar": "."
  },
  {
    "symbol": ">",
    "name": "Trigger Tile",
    "isBlocking": false,
    "isTrigger": true,
    "tileColor": "green",
    "tileChar": ">"
  },
  {
    "symbol": "-",
    "name": "Road",
    "isBlocking": false,
    "isTrigger": false,
    "tileColor": "darkgray",
    "tileChar": "-"
  },
  {
    "symbol": "@",
    "name": "Player Start",
    "isBlocking": false,
    "isTrigger": false,
    "tileColor": "yellow",
    "tileChar": "@"
  },
  {
    "symbol": "?",
    "name": "Unknown",
    "isBlocking": true,
    "isTrigger": false,
    "tileColor": "black",
    "tileChar": "?"
  }
]
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\entities\contentItem.mts
export class ContentItem {
    [key: string]: any; //any number of keys associated to any type of value

    public get: (() => Promise<ContentItem>) | null;
    public type: string;

    constructor(t: string, fn?: () => Promise<ContentItem>) {
        this.type = t;
        this.get = !!fn ? fn : null;
    };
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\entities\gameState.mts
// src/scripts/engine/gameState.mts
import { PlayerCharacter } from "./playerCharacter.mjs";

export type GameState = {
    creationSteps: string[];
    currentScreen: string;
    player: PlayerCharacter;
    campaign: string;
    creationStep: number;
    currentMapData: any;
};
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\entities\mapTile.mts
export type MapTile = {
    symbol: string;
    name: string;
    isBlocking: boolean;
    isTrigger: boolean;
    tileColor: string;
    tileChar: string;
};
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\entities\playerCharacter.mts
// src/scripts/engine/playerCharacter.mts
import { PlayerPosition as PositionXY } from "../utils.mjs";
import { ContentItem } from "./contentItem.mjs";

export type PlayerClass = {
    class: ContentItem;
    level: number;
    classSkills: string[]; // Specific to this class level
    hitDice: number; // Track individual class HD
};

export type PlayerCharacter = {
    selectedRace: ContentItem | null;
    classes: PlayerClass[];
    totalLevel: number;
    stats: { [key: string]: number };
    hitPoints: {
        current: number;
        max: number; // Calculated from class HD + CON mod
    };
    skillPoints: {
        remaining: number;
        // Track spent points per class
        allocations: Map<string, number>; // <skillId, ranks>
    };
    feats: ContentItem[];
    position: PositionXY;
};
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\entities\uiHolder.mts
export type UIHolder = {
    els: {
        [key: string]: HTMLElement;
    };
    inputs: {
        [key: string]: HTMLInputElement;
    };
    btns: {
        [key: string]: HTMLButtonElement;
    };
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\contentLoader.mts
import { ContentItem } from "./entities/contentItem.mjs";
import { MapTile } from "./entities/mapTile.mjs";

export class ContentLoader {
    private contentData: ContentItem = new ContentItem("category");
    private campaignData: ContentItem = new ContentItem("category");
    public tileDefinitions: MapTile[] | null = null;

    private async loadDirectory(dirPath: string): Promise<ContentItem> {
        const directory: ContentItem = new ContentItem("category");
        try {
            const response = await fetch(dirPath);
            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }
            const responseData: any[] = await response.json();
            for (const file of responseData) {
                const fullPath = `${dirPath}/${file.name}`;
                if (file.type === 'directory') {
                    directory[file.name] = await this.loadDirectory(fullPath); // Recursive call for subdirectories!
                } else {
                    if (file.name.endsWith('.json')) {
                        const itemName = file.name.slice(0, -5);
                        directory[itemName] = this.createContentItem(fullPath);
                    }
                }
            }

        } catch (error) {
            console.error(`Error reading directory: ${dirPath}`, error);
        }
        return directory;
    }

    private createContentItem(filePath: string): ContentItem {
        // Using a closure to encapsulate data and isLoaded, also changed it to 'let' instead of 'var'.
        const getLazyLoadFn = () => {
            let data: any = null;
            let isLoaded: boolean = false;

            return async () => {
                if (!isLoaded) {
                    try {
                        console.log(`Fetching ${filePath}`);
                        const response = await fetch(filePath)
                        if (!response.ok) {
                            throw new Error(`HTTP error: ${response.status}`);
                        }
                        data = await response.json()
                        isLoaded = true;
                    }
                    catch (error) {
                        console.error(`Error loading or parsing file: ${filePath}`, error);
                        return null
                    }
                }
                return data
            }
        };
        return new ContentItem("item", getLazyLoadFn());
    }

    private async loadTileDefinitions(): Promise<MapTile[]> { // New loadTileDefinitions method <---
        try {
            console.log(`Fetching ./content/tileDefinitions.json`);
            const response = await fetch('./content/tileDefinitions.json');
            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }
            const data = await response.json();
            return data as MapTile[]; // Cast to TileDefinition[]
        } catch (error) {
            console.error("Error loading tile definitions:", error);
            return []; // Or throw error, depending on how critical tile definitions are for game to start
        }
    }

    public async getContent(force?: boolean): Promise<ContentItem> {
        if (!force && Object.keys(this.contentData).length > 2) {//has get and type by default
            return this.contentData;
        }
        try {
            this.contentData = await this.loadDirectory('./content');
            this.tileDefinitions = await this.loadTileDefinitions();
            console.log("content loaded successfully from javascript calls:", this.contentData)
        }
        catch (e) {
            console.error("Could not fetch data: ", e);
        }
        return this.contentData;
    }

    public async getCampaigns(): Promise<ContentItem> {
        if (Object.keys(this.campaignData).length > 2) {//has get and type by default
            return this.campaignData;
        }
        try {
            this.campaignData = await this.loadDirectory('./campaigns')
            console.log("campaigns loaded successfully from javascript calls:", this.campaignData)
        }
        catch (e) {
            console.error("Could not fetch data: ", e);
        }
        return this.campaignData;
    }
    public async loadMap(campaignName: string, mapName: string): Promise<ContentItem> {
        const mapPath = `./campaigns/${campaignName}/maps/${mapName}.json`;
        const mapItem = this.createContentItem(mapPath);
        if (!mapItem.get) {
            return await new Promise<ContentItem>(() => null);
        }
        return await mapItem.get(); // Reuse createContentItem and get()
    }
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\dataManager.mts
// src/scripts/engine/dataManager.mts
import { GAME_STATE } from "../index.mjs";
import { UIHolder } from "./entities/uiHolder.mjs";
import { getRandomInt } from "./utils.mjs";

export function rollAbilities(uiScreens: UIHolder) {
    const asEl = getElAbilityScores(uiScreens);
    asEl.str.value = roll3d6().toString();
    asEl.dex.value = roll3d6().toString();
    asEl.con.value = roll3d6().toString();
    asEl.int.value = roll3d6().toString();
    asEl.wis.value = roll3d6().toString();
    asEl.cha.value = roll3d6().toString();
    updateAbilityScoreDisplay(uiScreens);
}

function roll3d6(): number {
    let roll = 0
    for (let i = 0; i < 3; i++) {
        roll += getRandomInt(1, 6)
    }
    return roll;
}

export function saveAbilities(uiScreens: UIHolder) {
    const asEl = getElAbilityScores(uiScreens);
    GAME_STATE.player.stats = {
        str: parseInt(asEl.str.value, 10),
        dex: parseInt(asEl.dex.value, 10),
        con: parseInt(asEl.con.value, 10),
        int: parseInt(asEl.int.value, 10),
        wis: parseInt(asEl.wis.value, 10),
        cha: parseInt(asEl.cha.value, 10),
    };

    // Initialize hit points if first save
    if (GAME_STATE.player.hitPoints.max === 0) {
        GAME_STATE.player.hitPoints = calculateBaseHitPoints();
    }
}

export function saveSkills(uiScreens: UIHolder) {
    const skillInputs = Array.from(
        uiScreens.els['skill-container'].querySelectorAll('input[type="number"]')
    ) as HTMLInputElement[];

    const newAllocations = new Map<string, number>();
    skillInputs.forEach(input => {
        const skillId = input.id.replace('-skill', '');
        const value = parseFloat(input.value) || 0;
        newAllocations.set(skillId, value);
    });

    GAME_STATE.player.skillPoints.allocations = newAllocations;
}

// New helper function
function calculateBaseHitPoints(): { current: number; max: number } {
    let total = 0;
    GAME_STATE.player.classes.forEach(cls => {
        const conMod = calcMod(GAME_STATE.player.stats.con);
        total += Math.max(1, cls.hitDice + conMod);
    });
    return { current: total, max: total };
}

// Update ability modifier calculation
export function calcMod(finalValue: number): number {
    return Math.floor((finalValue - 10) / 2);
}

export function getElAbilityScores(uiScreens: UIHolder): { [key: string]: HTMLInputElement } {
    return {
        str: uiScreens.inputs.str,
        dex: uiScreens.inputs.dex,
        con: uiScreens.inputs.con,
        int: uiScreens.inputs.int,
        wis: uiScreens.inputs.wis,
        cha: uiScreens.inputs.cha,
    };
}

export function calculateCurrentAbilityPoints(el: { [key: string]: HTMLInputElement }): number {
    let total = 0;
    Object.values(el).forEach((value, i) => {
        if (i < Object.values(el).length - 1) { total += pointBuyCost(parseInt(value.value)) };
    })
    return total;
}

export function pointBuyCost(roll: number) {
    let cost = 0;
    if (roll > 18) {
        cost += (roll - 18) * 3;
        roll = 18;
    }
    if (roll > 13) {
        cost += (roll - 13) * 2;
        roll = 13;
    }
    if (roll > 8) {
        cost += (roll - 8);
    }
    return cost;
}

export function updateAbilityScoreDisplay(UI: UIHolder) {
    const asEl: { [key: string]: HTMLInputElement } = getElAbilityScores(UI)
    const totalPoints: number = 32;
    const remainingPointsDisplay = UI.els["remainingPointsDisplay"];
    const currentTotal = calculateCurrentAbilityPoints(asEl)

    remainingPointsDisplay.textContent = (totalPoints - currentTotal).toString();
    Object.keys(asEl).map(ability => {
        const baseValue = parseInt(asEl[ability].value) || 0;

        const racialMod = GAME_STATE.player.selectedRace?.ability_score_adjustments[ability] || 0;
        const finalValue = baseValue + (racialMod);

        const costDisplay = UI.els[`${ability}-cost`];
        const modDisplay = UI.els[`${ability}-mod`];
        const finalDisplay = UI.els[`${ability}-total`];

        costDisplay.innerText = pointBuyCost(baseValue).toString();
        modDisplay.innerText = calcMod(finalValue).toString();
        finalDisplay.innerText = `${finalValue} (${baseValue}+${racialMod})`;
    });
}

/**
 * Calculates effective skill ranks for checks/display
 * @param skillId - ID from content/skills
 * @returns Effective ranks (including cross-class penalties)
 */
export function getSkillRank(skillId: string): number {
    const player = GAME_STATE.player;
    const pointsSpent = player.skillPoints.allocations.get(skillId) || 0;
    const isClassSkill = player.classes.some(cls =>
        cls.classSkills.includes(skillId)
    );
    return isClassSkill ? pointsSpent : pointsSpent / 2;
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\game.mts
import { ContentItem } from "./entities/contentItem.mjs";

export class Game {
  private gameLoopInterval: NodeJS.Timeout;

  constructor() {
    this.gameLoopInterval = setInterval(() => { console.log('pooling') }, 1000);
  }

  public start(): void {
    console.log("Game started: Initializing Level/Map and game engine behaviors..."); // Placeholder, but make use of dynamic or user created Ids and their behavior, with our intended json format and functionality to do more than just that: Test those.
  }
  public stop(): void {
    if (this.gameLoopInterval) {
      clearInterval(this.gameLoopInterval);
      console.log("Game stopped");
    }
  }
  private gameLoop(): void {
    // Place for adding placeholder game functionality that test our content implementation in previous code examples and with those hardcoded behaviors and through a specific HTML page
  }
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\renderer.mts
// src/scripts/engine/renderer.mts
import { ContentItem } from "../engine/entities/contentItem.mjs";
import { UIHolder } from "../engine/entities/uiHolder.mjs";
import { GAME_STATE } from "../index.mjs";
import { setActiveScreen, showCharacterCreationStep, updateCampaignInfo, updateCampaignList } from "../ui/uiManager.mjs";
import { ContentLoader } from "./contentLoader.mjs";
import { MapTile } from "./entities/mapTile.mjs";

export class Renderer {
    private uiScreens: UIHolder;
    private winDoc: any;
    private contentLoader: ContentLoader;

    constructor(uiScreens: UIHolder, winDoc: any, contentLoader: ContentLoader) {
        this.uiScreens = uiScreens;
        this.winDoc = winDoc;
        this.contentLoader = contentLoader;
    }

    public draw() { // this may be expanded to receive the content of json and its associated hardcoded code for handling these files
        if (!this.uiScreens) {
            console.error("Game Elements not defined on render function, stopping");
            return;
        }
        const gameArea: HTMLElement = this.uiScreens.els['gameContainer']
        if (!gameArea) {
            console.error("Game area element not defined");
            return;
        }

        const canvas: HTMLCanvasElement = gameArea.firstElementChild as HTMLCanvasElement;
        canvas.setAttribute("width", gameArea.clientWidth.toString());
        canvas.setAttribute("height", gameArea.clientHeight.toString());

        console.log("Game area is rendered:", gameArea);
    }

    // src/scripts/engine/renderer.mts
    public async renderScreen(campaignData: ContentItem, contentData: ContentItem) {
        if (!this.winDoc) {
            console.error('this.winDoc not initialized');
            return false;
        }
        setActiveScreen(GAME_STATE.currentScreen, this.uiScreens);
        console.log("Current Game State:", GAME_STATE.currentScreen);
        if (GAME_STATE.currentScreen === 'campaignSelection') {
            updateCampaignInfo(null, campaignData, this.uiScreens)
            updateCampaignList(campaignData, this.uiScreens.els['campaign-list-ul'], this.winDoc, this.uiScreens, (campaignName: string) => {
                GAME_STATE.campaign = campaignName;
                this.uiScreens.btns['campaignSelectBtn'].removeAttribute('style');
                console.log('Campaign selected', GAME_STATE.campaign)
            });
        }
        if (GAME_STATE.currentScreen === 'characterCreation') {
            showCharacterCreationStep(GAME_STATE.creationStep, contentData, campaignData, this.uiScreens, this)
        }
        if (GAME_STATE.currentScreen === 'gameContainer') {
            this.draw();
            console.log("Loaded data from a valid file system path as planned for this new game step using placeholder assets. The new render step will now make it show properly by accessing dynamic or user generated json files under all previously defined data, engine implementation and file systems or calls and methods/functions")

            const mapData: ContentItem = await this.contentLoader.loadMap(GAME_STATE.campaign, "starting_area");
            if (mapData) { // Check if mapData is not null before using it
                console.log("Loaded Map Data:", mapData);
                GAME_STATE.currentMapData = mapData; // Store map data in GAME_STATE

                this.renderMap(mapData); // Call renderMap to clear canvas only now
                this.renderPlayer(); // Call renderPlayer to render player
            } else {
                console.error("Failed to load map data."); // Handle null mapData
            }
        }
        return true;
    }

    private renderMap(mapData: any) {
        if (!mapData || !mapData.tiles) {
            console.error("Invalid map data or tiles not found.");
            return;
        }

        const gameArea: HTMLElement = this.uiScreens.els['gameContainer'];
        const canvas: HTMLCanvasElement = gameArea.firstElementChild as HTMLCanvasElement;
        const context = canvas.getContext('2d');
        if (!context) {
            console.error('Canvas 2d Context is null');
            return;
        }
        context.clearRect(0, 0, canvas.width, canvas.height);

        const tileSize = 32;
        const startX = 10;
        const startY = 50;
        const tileDefinitions = this.contentLoader.tileDefinitions;

        if (!tileDefinitions) {
            console.error("Tile definitions not loaded!");
            return;
        }

        mapData.tiles.forEach((row: string, rowIndex: number) => {
            row.split('').forEach((tileSymbol: string, colIndex: number) => {
                const tileX = startX + colIndex * tileSize;
                const tileY = startY + rowIndex * tileSize;
                const tileDef = this.getTileDef(tileDefinitions, tileSymbol);
                const tileColor = tileDef.tileColor;
                const tileChar = tileDef.tileChar;

                context.fillStyle = tileColor;
                context.fillRect(tileX, tileY, tileSize, tileSize);

                context.fillStyle = "white";
                context.font = '24px monospace';
                context.textAlign = 'center';
                context.textBaseline = 'middle';
                context.fillText(tileChar, tileX + tileSize / 2, tileY + tileSize / 2);
            });
        });

        // --- Render Player Character --- (No changes needed here)
        const playerX = GAME_STATE.player.position.x;
        const playerY = GAME_STATE.player.position.y;

        const playerCanvasX = startX + playerX * tileSize;
        const playerCanvasY = startY + playerY * tileSize;

        const playerChar = '@';
        context.fillStyle = "yellow";
        context.font = '24px monospace';
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        context.fillText(playerChar, playerCanvasX + tileSize / 2, playerCanvasY + tileSize / 2);
    }

    private getTileDef(tileDefinitions: MapTile[], tileSymbol: string): MapTile { // Added type annotation for tileDefinitions and return type

        return tileDefinitions.find(def => def.symbol === tileSymbol) || {
            symbol: '?',         // Default symbol is '?' for unknown
            name: 'Unknown',      // Added default name, isBlocking, isTrigger, tileColor too for completeness of TileDefinition
            isBlocking: true,
            isTrigger: false,
            tileColor: 'black',
            tileChar: '?'          // Default tileChar is '?' for unknown
        } as MapTile; //Explicit cast to TileDefinition for type safety of the default return.
    }

    public redrawTiles(prevPosition: { x: number, y: number }, newPosition: { x: number, y: number }) { // New redrawTiles function

        const mapData = GAME_STATE.currentMapData; // Get map data from GAME_STATE
        const tileDefinitions = this.contentLoader.tileDefinitions; // Get tile definitions
        if (!mapData || !mapData.tiles || !tileDefinitions) {
            console.error("Cannot redraw tiles: mapData or tileDefinitions missing.");
            return;
        }

        const gameArea: HTMLElement = this.uiScreens.els['gameContainer'];
        const canvas: HTMLCanvasElement = gameArea.firstElementChild as HTMLCanvasElement;
        const context = canvas.getContext('2d');
        if (!context) {
            console.error('Canvas 2d Context is null');
            return;
        }

        const tileSize = 32;
        const startX = 10;
        const startY = 50;

        const redrawTileAtPosition = (position: { x: number, y: number }) => { // Helper function to redraw a single tile
            const tileX = startX + position.x * tileSize;
            const tileY = startY + position.y * tileSize;
            const tileSymbol = mapData.tiles[position.y][position.x];
            const tileDef = this.getTileDef(tileDefinitions, tileSymbol);
            const tileColor = tileDef.tileColor;
            const tileChar = tileDef.tileChar;

            context.clearRect(tileX, tileY, tileSize, tileSize); // Partially clear tile area

            context.fillStyle = tileColor;
            context.fillRect(tileX, tileY, tileSize, tileSize);

            context.fillStyle = "white";
            context.font = '24px monospace';
            context.textAlign = 'center';
            context.textBaseline = 'middle';
            context.fillText(tileChar, tileX + tileSize / 2, tileY + tileSize / 2);
        };

        redrawTileAtPosition(prevPosition);
        redrawTileAtPosition(newPosition);
    }

    public renderPlayer() {
        const gameArea: HTMLElement = this.uiScreens.els['gameContainer'];
        const canvas: HTMLCanvasElement = gameArea.firstElementChild as HTMLCanvasElement;
        const context = canvas.getContext('2d');
        if (!context) {
            console.error('Canvas 2d Context is null');
            return;
        }
        const tileSize = 32;
        const startX = 10;
        const startY = 50;

        const playerX = GAME_STATE.player.position.x;
        const playerY = GAME_STATE.player.position.y;

        const playerCanvasX = startX + playerX * tileSize;
        const playerCanvasY = startY + playerY * tileSize;

        const playerChar = '@';
        context.fillStyle = "yellow";
        context.font = '24px monospace';
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        context.fillText(playerChar, playerCanvasX + tileSize / 2, playerCanvasY + tileSize / 2);
    }
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\engine\utils.mts
// src/scripts/engine/utils.mts

export type PlayerPosition = {
    x: number,
    y: number
}

export const MOVE_DIRECTIONS: { [key: string]: PlayerPosition } = {
    // Y-axis is usually inverted in screen coordinates (0,0 at top-left)
    UP: { x: 0, y: -1 } as PlayerPosition,
    DOWN: { x: 0, y: 1 } as PlayerPosition,
    LEFT: { x: -1, y: 0 } as PlayerPosition,
    RIGHT: { x: 1, y: 0 } as PlayerPosition,
};

export function getRandomInt(min: number, max: number) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\ui\uiManager.mts
// src/scripts/engine/uiManager.mts
import { calcMod, getSkillRank } from "../engine/dataManager.mjs";
import { ContentItem } from "../engine/entities/contentItem.mjs";
import { GameState } from "../engine/entities/gameState.mjs";
import { PlayerClass } from "../engine/entities/playerCharacter.mjs";
import { UIHolder } from "../engine/entities/uiHolder.mjs";
import { Renderer } from "../engine/renderer.mjs";
import { GAME_API, GAME_STATE } from "../index.mjs";

export async function updateCampaignInfo(campaign: any, campaignData: ContentItem, uiScreens: UIHolder) {
  const nameText = uiScreens.els['campaign-name'];
  const descText = uiScreens.els['campaign-desc'];
  const campaignInfoContainer = uiScreens.els['campaign-info'];
  if (campaign && typeof campaign === "string") {
    const currentCampaign = await campaignData[campaign]?.about?.info?.get();

    campaignInfoContainer.style.display = "";
    nameText.innerText = currentCampaign?.name ? currentCampaign.name : "";
    descText.innerText = currentCampaign?.description ? currentCampaign.description : "";
    return;
  }
  campaignInfoContainer.style.display = "none";
  return;
}

export function setActiveScreen(screenId: string, uiScreens: UIHolder) {
  toggleDisplay('startMenu', screenId, uiScreens);
  toggleDisplay('campaignSelection', screenId, uiScreens);
  toggleDisplay('characterCreation', screenId, uiScreens);
  toggleDisplay('gameContainer', screenId, uiScreens);
}

export function toggleDisplay(key: string, screenId: string, uiScreens: UIHolder) {
  const el = uiScreens.els[key];
  el.style.display = (el.id === screenId) ? '' : 'none';
}

export async function displayRaces(content: ContentItem, raceListContainer: HTMLElement, uiScreens: UIHolder) {
  raceListContainer.innerHTML = "";
  const races = await content.races;
  for (const raceKey in races) {
    if (raceKey !== 'type' && raceKey !== 'get') {
      const race = await races[raceKey].get();
      const raceButton = uiScreens.els['races-selector'].ownerDocument.createElement('button');
      raceButton.textContent = race.name;

      raceButton.onclick = async () => {
        updateSelectionInfo(race, uiScreens);
        GAME_STATE.player.selectedRace = race;
      };
      if (race.icon) {
        const imgElement = uiScreens.els['races-selector'].ownerDocument.createElement("img");
        imgElement.src = race.icon
        raceButton.appendChild(imgElement)
      }
      raceListContainer.appendChild(raceButton)
    }
  }
}

export function updateSelectionInfo(itemData: any, uiScreens: UIHolder) {
  console.log('updateSelectionInfo', itemData);
  const infoContainer = uiScreens.els['selector-info'];
  const elName = uiScreens.els['selected-name'];
  const elDesc = uiScreens.els['selected-desc'];

  elName.innerText = itemData.name;
  elDesc.innerText = itemData.description
  infoContainer.style.display = "";
}

export async function displayClasses(content: ContentItem, classListContainer: HTMLElement, uiScreens: UIHolder) {
  classListContainer.innerHTML = "";
  const classes = await content.classes;

  for (const classKey in classes) {
    if (classKey !== 'type' && classKey !== 'get') {
      const classData = await classes[classKey].get();
      const classButton = uiScreens.els['classes-selector'].ownerDocument.createElement('button');
      classButton.textContent = classData.name;

      classButton.onclick = async () => {
        // Add class to character with initial level 1
        GAME_STATE.player.classes.push({
          class: classData,
          level: 1,
          classSkills: classData.class_skills || [],
          hitDice: classData.hit_dice || 6 // Default to d6 if missing
        });

        // Update total level
        GAME_STATE.player.totalLevel = GAME_STATE.player.classes
          .reduce((sum, cls) => sum + cls.level, 0);

        updateSelectionInfo(classData, uiScreens);
      };

      if (classData.icon) {
        const imgElement = uiScreens.els['classes-selector'].ownerDocument.createElement("img");
        imgElement.src = classData.icon;
        classButton.appendChild(imgElement);
      }
      classListContainer.appendChild(classButton);
    }
  }
}

export async function displaySkills(contentData: ContentItem, skillListContainer: HTMLElement, uiScreens: UIHolder) {
  skillListContainer.innerHTML = "";
  const player = GAME_STATE.player;

  if (player.classes.length === 0) {
    console.error("No class selected");
    GAME_API.creationPrevStep();
    return;
  }
  // Calculate total skill points based on D&D 3.5e Rules
  let totalSkillPoints = player.classes.reduce((sum, cls) => {
    const classPoints = cls.class.skill_points_per_level?.base || 2;
    return sum + classPoints;
  }, 0);

  const intModifier = calcMod(player.stats.int);
  totalSkillPoints += intModifier;

  if (GAME_STATE.player.totalLevel === 1) {
    totalSkillPoints *= 4; // Only multiply by 4 on first level
  }

  // Initialize remaining points only if not set: This was also creating a bug because if you change screen and come back the points would always default to 0.
  if (player.skillPoints.remaining <= 0) {
    player.skillPoints.remaining = totalSkillPoints;
  }

  uiScreens.els['skill-points-remaining'].innerText =
    `Remaining skill points: ${player.skillPoints.remaining}/${totalSkillPoints}`;

  const skillItems: Node[] = [];
  const skillsCategory = contentData.skills;
  const skillInputs: HTMLInputElement[] = [];
  for (const skillId in skillsCategory) {
    if (skillId === 'get' || skillId === 'type') continue;

    const loadedSkill = await skillsCategory[skillId].get();
    const skillItem = uiScreens.els['skill-container'].ownerDocument.createElement('li');
    const isClassSkill = player.classes.some(cls =>
      cls.classSkills.includes(loadedSkill.name)
    );
    // Calculate maximum ranks based on character level
    const maxRanks = player.totalLevel + 3;
    const displayMax = isClassSkill ? maxRanks : Math.floor(maxRanks / 2);

    const skill: number = player.skillPoints?.allocations?.get(skillId) || 0;

    // Create input element
    const input = skillItem.ownerDocument.createElement("input");
    input.type = 'number';
    input.min = '0';
    input.max = displayMax.toString();
    input.step = isClassSkill ? '1' : '0.5';
    input.pattern = isClassSkill ? '\\d*' : '\\d*\\.?5?'; // Allow .5 values
    input.value = (isClassSkill ? skill : (skill / 2)).toString(); // Display stored value from player allocations, and correctly render "skill ranks", not "points", from allocation.
    input.dataset.isClassSkill = isClassSkill.toString();
    input.id = `${skillId}-skill`;

    // Create labels and indicators
    const label = skillItem.ownerDocument.createElement("label");
    label.htmlFor = input.id;
    label.textContent = loadedSkill.name;

    const typeIndicator = skillItem.ownerDocument.createElement("span");
    typeIndicator.textContent = `(${isClassSkill ? "Class Skill" : "Cross-Class"})`;
    typeIndicator.style.color = isClassSkill ? "#4CAF50" : "#FF9800";

    const maxIndicator = skillItem.ownerDocument.createElement("span");
    maxIndicator.textContent = `Max: ${displayMax}`;
    maxIndicator.style.marginLeft = "1rem";
    maxIndicator.style.opacity = "0.7";

    input.onchange = () => {
      const previousPoints = player.skillPoints.allocations.get(skillId) || 0;
      const rawValue = parseFloat(input.value) || 0;
      const displayedRanks = Math.min(rawValue, displayMax);

      // Calculate POINTS SPENT, not ranks
      const currentPoints = isClassSkill ? displayedRanks : Math.ceil(displayedRanks * 2);
      const pointsDiff = currentPoints - previousPoints
      const newRemaining = player.skillPoints.remaining - pointsDiff

      if (newRemaining < 0) {
        input.value = (previousPoints === 0) ? '0' : isClassSkill ? previousPoints.toString() : (previousPoints / 2).toString();
        return;
      }

      // Update allocations
      player.skillPoints.allocations.set(skillId, currentPoints);
      // Display the new value
      input.value = isClassSkill ? displayedRanks.toFixed(0) : (currentPoints / 2).toFixed(1);

      player.skillPoints.remaining = newRemaining;

      uiScreens.els['skill-points-remaining'].innerText =
        `Remaining skill points: ${newRemaining}/${totalSkillPoints}`;
    };

    skillItem.appendChild(input);
    skillItem.appendChild(typeIndicator);
    skillItem.appendChild(label);
    skillItem.appendChild(maxIndicator);
    skillItems.push(skillItem);
    skillInputs.push(input);
  }

  skillListContainer.append(...skillItems);
}

export function getUsedSkillPoints(inputCheckboxes: { input: HTMLInputElement, checkbox: HTMLInputElement }[]): number {
  let skillPoints = 0
  inputCheckboxes.forEach(ic => {
    const value = parseInt(ic.input.value);
    const isCrossClass = !!ic.checkbox.checked;
    skillPoints += (isCrossClass ? value * 2 : value) || 0;
  })
  return skillPoints
}

export async function updateCampaignList(
  campaignData: ContentItem,
  campaignListContainer: HTMLElement,
  winDoc: any,
  uiScreens: UIHolder,
  selectCampaignCallback: (campaignName: string) => void
) {
  campaignListContainer.innerHTML = '';
  for (var name in campaignData) {
    if (name !== 'type' && name !== 'get') {
      const campaignItem = campaignData[name];
      const campaign = await campaignItem.about.info.get();
      const campaignLi = winDoc.createElement('li');
      campaignLi.classList.add('campaign-item');
      campaignLi.textContent = campaign?.name || name;
      campaignLi.onclick = async () => {
        updateCampaignInfo(name, campaignData, uiScreens);
        uiScreens.btns['campaignSelectBtn'].removeAttribute('style');
        selectCampaignCallback(name)
      };
      campaignListContainer.appendChild(campaignLi);
    }
  }
}

export function showCharacterCreationStep(
  creationStep: number,
  contentData: ContentItem,
  campaignData: ContentItem,
  uiScreens: UIHolder,
  renderer: Renderer,
) {
  const raceListContainer = uiScreens.els['races-selector'];
  const abilityScoresContainer = uiScreens.els['ability-score-selection'];
  const classListContainer = uiScreens.els['classes-selector'];
  const skillListContainer = uiScreens.els['skills-selector'];
  const featListContainer = uiScreens.els['feats-selector'];
  const characterSummary = uiScreens.els['character-summary']; // Get summary screen element
  const btnBack = uiScreens.btns['back-btn'];
  const btnNext = uiScreens.btns['next-btn'];
  const elStepDesc = uiScreens.els['step-description'];
  const elSelectionInfo = uiScreens.els['selector-info'];

  elSelectionInfo.style.display = "none";
  raceListContainer.style.display = "none";
  classListContainer.style.display = "none";
  skillListContainer.style.display = "none";
  abilityScoresContainer.style.display = "none";
  featListContainer.style.display = "none";
  characterSummary.style.display = "none"; // Hide summary screen initially
  btnBack.style.display = "none";
  btnNext.style.display = "none";

  const currentStepName = GAME_STATE.creationSteps[creationStep]; // Get current step name

  switch (currentStepName) {
    case "raceSelection":
      raceListContainer.style.display = '';
      btnNext.style.display = "";
      elStepDesc.innerText = "Choose a Race";
      displayRaces(contentData, raceListContainer, uiScreens);
      break;
    case "abilityScoreSelection":
      abilityScoresContainer.style.display = "";
      btnBack.style.display = "";
      elStepDesc.innerText = "Set Abilities";
      break;
    case "classSelection":
      classListContainer.style.display = "";
      btnBack.style.display = "";
      btnNext.style.display = "";
      elStepDesc.innerText = "Choose a Class";
      displayClasses(contentData, classListContainer, uiScreens);
      break;
    case "skillSelection":
      skillListContainer.style.display = "";
      btnBack.style.display = "";
      btnNext.style.display = "";
      elStepDesc.innerText = "Skills";
      displaySkills(contentData, skillListContainer, uiScreens);
      break;
    case "featSelection":
      featListContainer.style.display = "";
      btnBack.style.display = "";
      btnNext.style.display = "";
      elStepDesc.innerText = "Choose Feats";
      displayFeats(contentData, featListContainer, uiScreens);
      break;
    case "characterSummary": // New case for summary screen
      characterSummary.style.display = "";
      btnBack.style.display = "";
      btnNext.style.display = "none"; // Hide "Next" on summary, maybe "Confirm" instead?
      elStepDesc.innerText = "Character Summary";
      displayCharacterSummary(contentData, campaignData, GAME_STATE, uiScreens, renderer); // Call summary display function
      break;
    default:
      console.error("Unknown creation step:", currentStepName);
      break;
  }
}

export async function displayFeats(content: ContentItem, featListContainer: HTMLElement, uiScreens: UIHolder) {
  featListContainer.innerHTML = "";
  const feats = await content.feats;
  for (const featKey in feats) {
    if (featKey !== 'type' && featKey !== 'get') {
      const feat = await feats[featKey].get();
      const featButton = uiScreens.els['feats-selector'].ownerDocument.createElement('button');
      featButton.textContent = feat.name;

      featButton.onclick = async () => {
        updateSelectionInfo(feat, uiScreens);
        GAME_STATE.player.feats.push(feat); // Store the feat in GAME_STATE
      };
      if (feat.icon) { // If you decide to add icons for feats later
        const imgElement = uiScreens.els['feats-selector'].ownerDocument.createElement("img");
        imgElement.src = feat.icon
        featButton.appendChild(imgElement)
      }
      featListContainer.appendChild(featButton)
    }
  }
}

export async function displayCharacterSummary(contentData: ContentItem, campaignData: ContentItem, gameState: GameState, uiScreens: UIHolder, renderer: Renderer) {
  const player = gameState.player;
  const summaryContainer = uiScreens.els['character-summary'];
  summaryContainer.innerHTML = ''; // Clear previous content

  if (!gameState.player.selectedRace || gameState.player.classes.length === 0) {
    summaryContainer.textContent = "Character data is incomplete.";
    return;
  }

  // --- Race Section ---
  const raceHeader = summaryContainer.ownerDocument.createElement('h3');
  raceHeader.textContent = "Race";
  summaryContainer.appendChild(raceHeader);

  const raceName = summaryContainer.ownerDocument.createElement('p');
  raceName.textContent = player.selectedRace?.name;
  summaryContainer.appendChild(raceName);

  // --- Class Section ---
  const classHeader = summaryContainer.ownerDocument.createElement('h3');
  classHeader.textContent = "Class(es)";
  summaryContainer.appendChild(classHeader);

  const classList = summaryContainer.ownerDocument.createElement('ul');
  player.classes.forEach((classInfo: PlayerClass) => {
    const classItem = summaryContainer.ownerDocument.createElement('li');
    classItem.textContent = `${classInfo.class.name} Level ${classInfo.level}`;
    classList.appendChild(classItem);
  });
  summaryContainer.appendChild(classList);

  // --- Abilities Section ---
  const abilitiesHeader = summaryContainer.ownerDocument.createElement('h3');
  abilitiesHeader.textContent = "Abilities";
  summaryContainer.appendChild(abilitiesHeader);

  const abilitiesList = summaryContainer.ownerDocument.createElement('ul');
  for (const ability in player.stats) {
    const abilityItem = summaryContainer.ownerDocument.createElement('li');
    const mod = calcMod(player.stats[ability]); // Assuming calcMod is imported or defined
    abilityItem.textContent = `${ability.toUpperCase()}: ${player.stats[ability]} (Mod: ${mod})`;
    abilitiesList.appendChild(abilityItem);
  }
  summaryContainer.appendChild(abilitiesList);

  // --- Skills Section ---
  const skillsHeader = summaryContainer.ownerDocument.createElement('h3');
  skillsHeader.textContent = "Skills";
  summaryContainer.appendChild(skillsHeader);

  const skillsList = summaryContainer.ownerDocument.createElement('ul');
  for (const [skillId, points] of player.skillPoints.allocations.entries()) {
    const skillItem = summaryContainer.ownerDocument.createElement('li');
    const skillName = skillId; // Assuming skillId is the skill name, adjust if needed
    const skillRanks = getSkillRank(skillId);
    skillItem.textContent = `${skillName}: Ranks ${skillRanks} (Points: ${points})`;
    skillsList.appendChild(skillItem);
  }
  summaryContainer.appendChild(skillsList);

  // --- Feats Section ---
  const featsHeader = summaryContainer.ownerDocument.createElement('h3');
  featsHeader.textContent = "Feats";
  summaryContainer.appendChild(featsHeader);

  if (player.feats && player.feats.length > 0) {
    const featsList = summaryContainer.ownerDocument.createElement('ul');
    player.feats.forEach((feat: ContentItem) => {
      const featItem = summaryContainer.ownerDocument.createElement('li');
      featItem.textContent = feat.name;
      featsList.appendChild(featItem);
    });
    summaryContainer.appendChild(featsList);
  } else {
    const noFeats = summaryContainer.ownerDocument.createElement('p');
    noFeats.textContent = "No feats selected.";
    summaryContainer.appendChild(noFeats);
  }

  // --- Hit Points Section ---
  const hpHeader = summaryContainer.ownerDocument.createElement('h3');
  hpHeader.textContent = "Hit Points";
  summaryContainer.appendChild(hpHeader);

  const hpDisplay = summaryContainer.ownerDocument.createElement('p');
  hpDisplay.textContent = `Max HP: ${player.hitPoints.max}`; // Just max HP for summary
  summaryContainer.appendChild(hpDisplay);

  // --- Confirm Button (Optional for now, add later if needed) ---
  const confirmButton = summaryContainer.ownerDocument.createElement('button');
  confirmButton.textContent = "Confirm Character";
  confirmButton.onclick = () => {
    const btnBack = uiScreens.btns['back-btn'];
    const btnNext = uiScreens.btns['next-btn'];
    btnBack.style.display = "none";
    btnNext.style.display = "none";

    GAME_STATE.currentScreen = "gameContainer"; // Set game state to gameContainer
    renderer.renderScreen(campaignData, contentData); // Trigger screen render, which will now load the map
    setActiveScreen('gameContainer', uiScreens); // Make sure gameContainer screen is active (visible) - IMPORTANT
  };
  summaryContainer.appendChild(confirmButton);
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\scripts\index.mts
// src/scripts/index.mts
import { ContentLoader } from './engine/contentLoader.mjs';
import { rollAbilities, saveAbilities, updateAbilityScoreDisplay } from './engine/dataManager.mjs';
import { GameState } from './engine/entities/gameState.mjs';
import { MapTile } from './engine/entities/mapTile.mjs';
import { UIHolder } from './engine/entities/uiHolder.mjs';
import { Game } from './engine/game.mjs';
import { Renderer } from './engine/renderer.mjs';
import { MOVE_DIRECTIONS, PlayerPosition } from './engine/utils.mjs';

const NULL_PLAYER = {
  classes: [],
  totalLevel: 0,
  selectedRace: null,
  stats: {},
  hitPoints: { current: 0, max: 0 },
  skillPoints: { remaining: 0, allocations: new Map() },
  feats: [],
  position: { x: 1, y: 1 },
};

export let GAME_API: any = { init: false };
export const GAME_STATE: GameState = {
  currentScreen: "startMenu",
  player: NULL_PLAYER,
  campaign: "",
  creationStep: 0,
  creationSteps: [ // Define creation steps here
    "raceSelection",
    "abilityScoreSelection",
    "classSelection",
    "skillSelection",
    "featSelection",
    "characterSummary"
  ],
  currentMapData: null,
};

async function initializeGame(winObj: any) {
  console.log('INITIALIZING', winObj);
  const winDoc = winObj.document;
  const uiScreens: UIHolder = getUiScreens(winObj);
  const contentLoader = new ContentLoader();
  const renderer = new Renderer(uiScreens, winDoc, contentLoader);

  const contentData = await contentLoader.getContent();
  const campaignData = await contentLoader.getCampaigns();

  winObj.gameApi = {
    init: true,
    newGameClick: () => {
      GAME_STATE.currentScreen = "campaignSelection";
      renderer.renderScreen(campaignData, contentData);
    },
    selectCampaign: async () => {
      GAME_STATE.currentScreen = "characterCreation";
      GAME_STATE.player = { ...NULL_PLAYER }; // Reset to initial state
      GAME_STATE.creationStep = 0;
      renderer.renderScreen(campaignData, contentData);
    },
    creationNextStep: () => {
      console.log('Next step', GAME_STATE.creationStep);
      GAME_STATE.creationStep = GAME_STATE.creationStep + 1;
      if (GAME_STATE.creationStep >= GAME_STATE.creationSteps.length) GAME_STATE.creationStep = GAME_STATE.creationSteps.length - 1; // Use array length
      renderer.renderScreen(campaignData, contentData);
    },
    creationPrevStep: () => {
      console.log('Prev step', GAME_STATE.creationStep);
      GAME_STATE.creationStep = GAME_STATE.creationStep - 1;
      if (GAME_STATE.creationStep < 0) GAME_STATE.creationStep = 0;
      renderer.renderScreen(campaignData, contentData);
    },
    saveAbilities: () => {
      saveAbilities(uiScreens);
      winObj.gameApi.creationNextStep();
    },
    rollAbilities: () => { rollAbilities(uiScreens) },
    updateAbilityScoreDisplay: () => { updateAbilityScoreDisplay(uiScreens) },
    continueGameClick: () => {
      console.log("Continue clicked. Loading last save state, if present (placeholder).");
    },
    exitGameClick: () => {
      console.log("Exiting game.");
    },
    movePlayer: (direction: PlayerPosition) => {
      console.log("movePlayer called, direction:", direction);
      const currentPlayerPosition = GAME_STATE.player.position;
      const intendedNewPosition = { // Calculate intended new position
        x: currentPlayerPosition.x + direction.x,
        y: currentPlayerPosition.y + direction.y,
      };

      const mapTiles = GAME_STATE.currentMapData.tiles; // Get map tiles
      const mapHeight = mapTiles.length;
      const mapWidth = mapTiles[0].length;
      const tileDefinitions = contentLoader.tileDefinitions; // Get tile definitions
      const isValidMovement: boolean = intendedNewPosition.x >= 0
        && intendedNewPosition.x < mapWidth
        && intendedNewPosition.y >= 0
        && intendedNewPosition.y < mapHeight;

      if (!isValidMovement) {
        // Do NOT update player position - boundary collision
        console.log("Movement blocked by map boundary");
        renderer.renderPlayer(); // Still render player even on blocked move, for animation/feedback if needed
        return;
      }

      const tileSymbolAtNewPosition = mapTiles[intendedNewPosition.y][intendedNewPosition.x];
      const tileDef = tileDefinitions?.find(def => def.symbol === tileSymbolAtNewPosition);
      const isBlockingTile = tileDef ? tileDef.isBlocking : false;

      if (isBlockingTile) {
        // Do NOT update player position - wall collision
        console.log("Movement blocked by wall:", tileDef?.name || "Wall");
        renderer.renderPlayer(); // Still render player even on blocked move
        return;
      }

      // Valid move - update player position
      const prevPlayerPosition = { ...GAME_STATE.player.position }; // Store previous position for redraw
      GAME_STATE.player.position = intendedNewPosition;

      if (tileDef && tileDef.isTrigger) {
        console.log("Stepped on a trigger tile!");

        const triggerSymbol = tileSymbolAtNewPosition;
        const trigger = GAME_STATE.currentMapData.triggers.find(
          (triggerDef: MapTile) => triggerDef.symbol === triggerSymbol
        );

        if (trigger) {
          const targetMapName = trigger.targetMap;
          const targetLocation = trigger.targetLocation;

          contentLoader.loadMap(GAME_STATE.campaign, targetMapName)
            .then(newMapData => {
              if (newMapData) {
                GAME_STATE.currentMapData = newMapData;
                GAME_STATE.player.position = targetLocation;
                renderer.renderScreen(campaignData, contentData); // Full re-render for map transition
              } else {
                console.error("Failed to load target map:", targetMapName);
              }
            })
            .catch(error => {
              console.error("Error loading target map:", targetMapName, error);
            });
          return; // Exit after map transition
        } else {
          console.error("Trigger definition not found for symbol:", triggerSymbol);
        }
      }

      renderer.redrawTiles(prevPlayerPosition, intendedNewPosition); // Partial redraw for normal movement
      renderer.renderPlayer(); // Re-render player on top
    },
    gameState: GAME_STATE,
  };
  GAME_API = winObj.gameApi

  window.addEventListener('keydown', (event) => {
    switch (event.key) {
      case "ArrowUp":
        winObj.gameApi.movePlayer(MOVE_DIRECTIONS.UP);
        break;
      case "ArrowDown":
        winObj.gameApi.movePlayer(MOVE_DIRECTIONS.DOWN);
        break;
      case "ArrowLeft":
        winObj.gameApi.movePlayer(MOVE_DIRECTIONS.LEFT);
        break;
      case "ArrowRight":
        winObj.gameApi.movePlayer(MOVE_DIRECTIONS.RIGHT);
        break;
      // ... (default case - can be removed or kept for other key handling) ...
    }
  });

  renderer.renderScreen(campaignData, contentData);
  new Game().start();
}

function getUiScreens(winObj: any): UIHolder {
  return {
    els: {
      'startMenu': winObj.document.getElementById('startMenu') as HTMLElement,
      'characterCreation': winObj.document.getElementById('characterCreation') as HTMLElement,
      'campaignSelection': winObj.document.getElementById('campaignSelection') as HTMLElement,
      'gameContainer': winObj.document.getElementById('gameContainer') as HTMLElement,
      'races-selector': winObj.document.getElementById('races-selector') as HTMLElement,
      'classes-selector': winObj.document.getElementById('classes-selector') as HTMLElement,
      'skills-selector': winObj.document.getElementById('skills-selector') as HTMLElement,
      'ability-score-selection': winObj.document.getElementById('ability-score-selection') as HTMLElement,
      'step-description': winObj.document.getElementById('step-description') as HTMLElement,
      'selector-info': winObj.document.getElementById('selector-info') as HTMLElement,
      'remainingPointsDisplay': winObj.document.getElementById('remainingPointsDisplay') as HTMLElement,
      'campaign-list-ul': winObj.document.getElementById('campaign-list-ul') as HTMLUListElement,
      'campaign-info': winObj.document.getElementById('campaign-info') as HTMLElement,
      'campaign-name': winObj.document.getElementById('campaign-name') as HTMLParagraphElement,
      'campaign-desc': winObj.document.getElementById('campaign-desc') as HTMLParagraphElement,
      'selected-name': winObj.document.getElementById('selected-name') as HTMLElement,
      'selected-desc': winObj.document.getElementById('selected-desc') as HTMLElement,
      'skill-container': winObj.document.getElementById('skill-container') as HTMLUListElement,
      'skill-points-remaining': winObj.document.getElementById('skill-points-remaining') as HTMLLabelElement,
      'str-cost': winObj.document.getElementById(`str-cost`) as HTMLSpanElement,
      'dex-cost': winObj.document.getElementById(`dex-cost`) as HTMLSpanElement,
      'con-cost': winObj.document.getElementById(`con-cost`) as HTMLSpanElement,
      'int-cost': winObj.document.getElementById(`int-cost`) as HTMLSpanElement,
      'wis-cost': winObj.document.getElementById(`wis-cost`) as HTMLSpanElement,
      'cha-cost': winObj.document.getElementById(`cha-cost`) as HTMLSpanElement,
      'str-total': winObj.document.getElementById(`str-total`) as HTMLSpanElement,
      'dex-total': winObj.document.getElementById(`dex-total`) as HTMLSpanElement,
      'con-total': winObj.document.getElementById(`con-total`) as HTMLSpanElement,
      'int-total': winObj.document.getElementById(`int-total`) as HTMLSpanElement,
      'wis-total': winObj.document.getElementById(`wis-total`) as HTMLSpanElement,
      'cha-total': winObj.document.getElementById(`cha-total`) as HTMLSpanElement,
      'str-mod': winObj.document.getElementById(`str-mod`) as HTMLSpanElement,
      'dex-mod': winObj.document.getElementById(`dex-mod`) as HTMLSpanElement,
      'con-mod': winObj.document.getElementById(`con-mod`) as HTMLSpanElement,
      'int-mod': winObj.document.getElementById(`int-mod`) as HTMLSpanElement,
      'wis-mod': winObj.document.getElementById(`wis-mod`) as HTMLSpanElement,
      'cha-mod': winObj.document.getElementById(`cha-mod`) as HTMLSpanElement,
      'feats-selector': winObj.document.getElementById('feats-selector') as HTMLElement,
      'character-summary': winObj.document.getElementById('character-summary') as HTMLElement,
    },
    inputs: {
      "str": winObj.document.getElementById("str") as HTMLInputElement,
      "dex": winObj.document.getElementById("dex") as HTMLInputElement,
      "con": winObj.document.getElementById("con") as HTMLInputElement,
      "int": winObj.document.getElementById("int") as HTMLInputElement,
      "wis": winObj.document.getElementById("wis") as HTMLInputElement,
      "cha": winObj.document.getElementById("cha") as HTMLInputElement,
    },
    btns: {
      'back-btn': winObj.document.getElementById('back-btn') as HTMLButtonElement,
      'next-btn': winObj.document.getElementById('next-btn') as HTMLButtonElement,
      'campaignSelectBtn': winObj.document.getElementById('campaignSelectBtn') as HTMLButtonElement,
    }
  };
};

initializeGame(window);
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\server\server.ts
import { existsSync, promises, readdirSync } from 'fs';
import * as http from 'http';
import { extname, join } from 'path';

const PORT = 3000;
const basePath = process.env.OUT_PATH === 'output' ? './output' : '.'; // Adjust paths accordingly

// Implement and configure basic http server using our index.ts with all data already available at the top
export function getServer() {
    return http.createServer(async (req, res) => {
        try {
            // Get the request's URL
            const requestUrl = req.url === '/' ? '/index.html' : req.url;
            if (!requestUrl) {
                console.error('Url is null');
                return;
            }

            const path = requestUrl.endsWith('mts') ? '.' : basePath;//for debuging with the .mts source files on the browser since we generate the file maps anyway

            // Check file path with existing files, otherwise redirect them to `index.html`: This makes it simple to start using that HTML
            if (!requestUrl.startsWith('/')) {
                // For every request use `/index.html` as a root: That is where your main page is.
                const filePath = join(path, 'index.html');
                const fileData = await promises.readFile(filePath);
                res.writeHead(200, { 'Content-Type': 'text/html' });
                res.end(fileData);
            }

            // This allows relative paths in CSS and Javascript using those files relative paths when they request those dynamically or using our new HTML to set those up. So our previously described paths like `game-d20/` can then be easily used. This is set using that path for now. It will use whatever paths the user hardcoded (or will use dynamically if implementing those) when using that html, to access assets, etc.. If creating subfolders to help organizing this logic and using placeholders as previously designed, implement their relative paths here.
            const filePath = join(path, requestUrl);
            const fileExtension = extname(filePath);
            const isDir = await promises.stat(filePath).then(stats => stats.isDirectory()).catch(() => false); // Better error swallowing
            if (await isDir) {
                // If it's a directory create the JSON for files and subdirectories:
                const files = await readdirSync(filePath, { withFileTypes: true })
                const responseData = files.map(file => {
                    return {
                        name: file.name,
                        type: file.isDirectory() ? 'directory' : 'file'
                    };
                });
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify(responseData))
                return
            }

            const fileData = await promises.readFile(filePath);
            res.writeHead(200, { 'Content-Type': getMIMEType(fileExtension) });
            res.end(fileData);
            return
        } catch (e) {
            console.error(e);
            res.writeHead(500, { 'Content-Type': 'text/plain' });
            res.end('Internal Server Error');
        }
    });
}

function getMIMEType(fileExtension: string): string {
    switch (fileExtension) {
        case '.css':
            return 'text/css'
        case '.js':
            return 'text/javascript'
        case '.mjs':
            return 'text/javascript'
        case '.html':
            return 'text/html'
        case '.ico':
            return 'image/x-icon'
        default:
            return 'application/octet-stream';
    }
}

getServer().listen(PORT, () => {
    console.log(`Server listening on port ${PORT}. ${process.env.OUT_PATH} : ${basePath}`,);
});
```

```
File: D:\Projects\Game Dev\my-rpg-project\src\index.html
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My RPG Project</title>
  <style>
    body {
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      background-color: #222;
      color: white;
      text-align: center;
    }

    h1 {
      margin-bottom: 20px;
    }

    button {
      background-color: #555;
      color: white;
      padding: 10px 20px;
      margin: 10px;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #777;
    }

    #gameContainer {
      width: 800px;
      height: 600px;
      border: 2px solid white;
      display: block;
    }

    #campaigns-container {
      margin-top: 20px;
      max-width: 400px;
      text-align: left;
      display: flex;
    }

    #campaign-list-ul {
      flex: 1;
    }

    #campaign-info {
      margin-left: 20px;
      flex: 1;
    }

    .campaign-item {
      padding: 5px;
      border-bottom: 1px solid #444;
      cursor: pointer;
    }

    .campaign-item:hover {
      background-color: #333;
    }

    /* CHARACTER CREATION */
    #characterCreation h2 {
      margin-top: 20px;
    }

    #characterCreation #character-selector {
      display: flex;
      align-items: flex-start;
      justify-content: center;
      width: 800px;
    }

    .selector {
      max-height: 80vh;
      overflow-y: scroll;
      padding: 50px;
      display: flex;
      align-items: flex-start;
      flex-direction: column;
      justify-content: center;
      flex: 1;
    }

    .selector>* {
      padding: 10px;
      width: fit-content;
      margin: 10px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .selector li {
      flex-direction: row;
      padding: 0px;
      margin: 0px;
    }

    .selector img {
      height: 100px;
      width: 100px;
    }

    #characterCreation button {
      display: inline-block;
    }

    #characterCreation #selector-info {
      flex: 1;
      margin-left: 10px;
      max-width: 300px;
      text-align: left;
    }

    #characterCreation #selector-info p {
      margin-top: 10px;
      text-align: justify;
    }

    #ability-score-selection {
      margin-top: 20px;
    }

    #ability-score-selection #ability-scores-container {
      display: flex;
      flex-direction: column;
      flex-wrap: wrap;
      align-items: center;
    }

    #ability-score-selection .ability-score-container {
      width: fit-content;
      flex-direction: column;
      margin: 10px;
    }

    #ability-score-selection .ability-score-row {
      width: fit-content;
      display: flex;
      align-items: center;
      margin: 10px;
    }


    #ability-score-selection .ability-score-row>label {
      margin-right: 5px;
      width: 70px;
      text-align: center;
    }

    #ability-score-selection .ability-score-row>span {
      margin-left: 10px;
      margin-right: 10px;
      width: 70px;
      text-align: center;
    }

    .btnContainer {
      flex-direction: row;
    }

    /* END OF CHARACTER CREATION */
  </style>
  <script type="module" defer src="./scripts/index.mjs"></script>
  <script>
    function doInit() {
      var gameApi = window.gameApi;
      console.log('Set global gameApi in browser context from window object.', gameApi);
    }
  </script>
</head>

<body onload="doInit()">
  <div id="startMenu">
    <h1>Eversummer Days</h1>
    <br>
    <button aria-label="New Game" onclick="gameApi.newGameClick()">New Game</button>
    <br>
    <button aria-label="Continue" onclick="gameApi.continueGameClick()">Continue</button>
    <br>
    <button aria-label="Exit" onclick="gameApi.exitGameClick()">Exit</button>
  </div>
  <div id="characterCreation" style="display:none;">
    <!-- CHARACTER CREATION -->
    <h1>Character Creation</h1>
    <div id="creation-step-indicator">
      <h2 id="step-description"> Select a Race</h2>
    </div>
    <div id="character-selector">
      <div class="selector" id="races-selector">
      </div>
      <div class="selector" id="classes-selector" style="display: none;">
      </div>
      <div class="selector" id="feats-selector" style="display: none;">
      </div>
      <div class="selector" id="character-summary" style="display: none;">
      </div>
      <div id="selector-info" style="display:none">
        <h3 id="selected-name"></h3>
        <div id="selected-desc"></div>
      </div>
    </div>
    <div id="ability-score-selection" style="display:none">
      <h2>Assign Ability Scores</h2>
      <p id="points-remaining"> Points remaining: <span id="remainingPointsDisplay">32</span></p>
      <div id="ability-scores-container">
        <div class="ability-score-row">
          <label>Ability:</label>
          <span></span>
          <span>Cost</span>
          <span>Total</span>
          <span>Mod</span>
        </div>
        <div class="ability-score-row">
          <label for="str">STR:</label>
          <input type="number" id="str" value="8" min="8" max="18" onchange="gameApi.updateAbilityScoreDisplay()" />
          <span id="str-cost">0</span>
          <span id="str-total">8</span>
          <span id="str-mod">0</span>
        </div>
        <div class="ability-score-row">
          <label for="dex">DEX:</label>
          <input type="number" id="dex" value="8" min="8" max="18" onchange="gameApi.updateAbilityScoreDisplay()" />
          <span id="dex-cost">0</span>
          <span id="dex-total">8</span>
          <span id="dex-mod">0</span>
        </div>
        <div class="ability-score-row">
          <label for="con">CON:</label>
          <input type="number" id="con" value="8" min="8" max="18" onchange="gameApi.updateAbilityScoreDisplay()" />
          <span id="con-cost">0</span>
          <span id="con-total">8</span>
          <span id="con-mod">0</span>
        </div>
        <div class="ability-score-row">
          <label for="int">INT:</label>
          <input type="number" id="int" value="8" min="8" max="18" onchange="gameApi.updateAbilityScoreDisplay()" />
          <span id="int-cost">0</span>
          <span id="int-total">8</span>
          <span id="int-mod">0</span>
        </div>
        <div class="ability-score-row">
          <label for="wis">WIS:</label>
          <input type="number" id="wis" value="8" min="8" max="18" onchange="gameApi.updateAbilityScoreDisplay()" />
          <span id="wis-cost">0</span>
          <span id="wis-total">8</span>
          <span id="wis-mod">0</span>
        </div>
        <div class="ability-score-row">
          <label for="cha">CHA:</label>
          <input type="number" id="cha" value="8" min="8" max="18" onchange="gameApi.updateAbilityScoreDisplay()" />
          <span id="cha-cost">0</span>
          <span id="cha-total">8</span>
          <span id="cha-mod">0</span>
        </div>
      </div>
      <button id="roll-ability-scores" onclick="gameApi.rollAbilities()"> Roll scores (3d6) </button>
      <button id="take-roll-btn" onclick="gameApi.saveAbilities()">Take Roll</button>
    </div>
  </div>
  <div class="selector" id="skills-selector" style="display: none;">
    Spend your Skill Points.<br>
    <label id="skill-points-remaining"></label><br>
    <ul id="skill-container">
    </ul>
  </div>
  <div class="btnContainer">
    <button style="display: none" id="back-btn" onclick="gameApi.creationPrevStep()">Back</button>
    <button style="display: none" id="next-btn" onclick="gameApi.creationNextStep()">Next</button>
  </div>
  <!-- END OF CHARACTER CREATION -->
  </div>
  <div id="campaignSelection" style="display:none;">
    <h1>Campaign Selection</h1>
    <div id="campaigns-container">
      <ul id="campaign-list-ul"></ul>
      <div id="campaign-info" style="display:none">
        <div id="campaign-info-details">
          <p id="campaign-name"></p>
          <p id="campaign-desc"></p>
        </div>
        <button id="campaignSelectBtn" onclick="gameApi.selectCampaign()" style="display:none;">Select</button>
      </div>
    </div>
  </div>
  <div id="gameContainer" style="display:none;">
    <canvas id="gameCanvas"></canvas>
  </div>
</body>

</html>
```

```
File: D:\Projects\Game Dev\my-rpg-project\.gitignore
# Utils bat file
run-codium.bat

# Node modules
node_modules/
pnpm-lock.yaml

# Distribution (build) folder
dist/
output/

# Any .class file (if any Java/JVM exists in your project, like through other projects and functionalities unrelated to your bundled typescript RPG engine we're building together)
*.class

# Package-lock file for npm versions earlier than 5
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Test specific folder/files
test/

# Log files
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# OS or Editor specific files
.DS_Store
Thumbs.db

# Visual Studio Code
.vscode/
*.code-workspace

# Optional: env files with local, development, private variables that shouldn't be publicly included in repositories.
.env

# Other potential files and directories from tools we don't have but can still exist from unrelated usages on the user's part:
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw*
.nyc_output
coverage
.webpack/

# pkg specific:
dist/pkg-output.exe
output/pkg-output.exe
```

```
File: D:\Projects\Game Dev\my-rpg-project\list_dirs_and_files.ps1
# --- Function Definition (Place this at the beginning of your script) ---
function Get-DirectoryTreeString {
    param(
        [string]$Path,
        [string[]]$ExcludeList,
        [string]$Indent = ""
    )

    $treeString = ""

    Get-ChildItem -Path $Path -Directory | ForEach-Object {
        $directory = $_
        $isExcluded = $ExcludeList | Where-Object { (Split-Path $directory.FullName -Parent) -ilike $_ }

        if (-not $isExcluded) {
            $treeString += "$Indent|-- $($directory.Name)`n"
            $treeString += Get-DirectoryTreeString -Path $directory.FullName -ExcludeList $ExcludeList -Indent ($Indent + "|   ")
        }
    }

    Get-ChildItem -Path $Path -File -Exclude $ExcludeList | ForEach-Object {
        $file = $_
        $treeString += "$Indent|-- $($file.Name)`n"
    }
    return $treeString
}

[string[]]$excludeFolderList = @( # Exclusion list
    "*list_dirs_and_files.txt",
    "*node_modules*",
    "*.git",
    "*.vscode",
    "*output*",
    "*dist*",
    "*build*",
    "*temp*",
    "*.log",
    "*.map",
    "*.bak",
    "*.bat",
    "*.temp",
    "*.md",
    "*.ico",
    "*LICENSE",
    "*package-lock.json",
    "*.DS_Store", # macOS folder metadata file
    "*Thumbs.db"   # Windows thumbnail cache file
)

$directoryToCrawl = ".\" #  <---  Set your directory path here
$outputFilePath = ".\list_dirs_and_files.txt" # <--- Set output file path

Write-Host "Crawling directory: $($directoryToCrawl)" -ForegroundColor Cyan
Write-Host "Excluding items:" $($excludeFolderList -join ", ") -ForegroundColor Cyan

Write-Host "Generating directory tree..." -ForegroundColor Cyan
$treeOutput = Get-DirectoryTreeString -Path $directoryToCrawl -ExcludeList $excludeFolderList
Write-Host "Directory tree generated." -ForegroundColor Cyan

$outputContent = "" # Initialize variable to store output content

$outputContent += "--- Directory Tree Structure ---`n" # Add tree section header
$outputContent += '```' + "`n" + $treeOutput + "`n" + '```' # Append directory tree string
$outputContent += "`n--- File List and Contents ---`n" # Add file list section header

Get-ChildItem -Path $directoryToCrawl -Recurse -File -Exclude $excludeFolderList | ForEach-Object {
    $allowed = $true
    foreach ($exclude in $excludeFolderList) { 
        if ((Split-Path $_.FullName -Parent) -ilike $exclude) { 
            $allowed = $false
            break
        }
    }
    if ($allowed) {
        Write-Host "Processing file: $($_.FullName)" -ForegroundColor Cyan 
        $outputContent += '```' + "`nFile: $($_.FullName)`n" # Add filename to output content
        $outputContent += (Get-Content -Path $_.FullName) -join "`n" # Add file content
        $outputContent += "`n" + '```' + "`n`n" # Add blank lines between files
    } else {
        Write-Host "Ignoring: $($_.FullName)" -ForegroundColor Gray # Use Write-Verbose for "Ignoring" messages
    }
}

$outputContent | Out-File -FilePath $outputFilePath -Encoding UTF8 # Write accumulated content to file (overwriting) <--- No -Append

Write-Host "Output written to: $($outputFilePath)" -ForegroundColor Cyan 
Write-Host "Run script with -Verbose to see 'Ignoring' messages." -ForegroundColor DarkGray # Inform user about -Verbose
```

```
File: D:\Projects\Game Dev\my-rpg-project\package.json
{
  "name": "my-rpg-project",
  "version": "1.0.0",
  "description": "A 2D turn-based RPG",
  "main": "index.html",
  "bin": {
    "my-rpg-project": "./output/server/server.js"
  },
  "scripts": {
    "build": "pnpm run clean && npx tsc -outDir output && npx pkg . --out-path output && pnpm run copy-content",
    "clean": "node -e \"require('fs').rmSync('./output/', {recursive: true, force: true});\"",
    "copy-content": "node -e \"require('fs').cpSync('./src/resources', './output/resources', {recursive: true});require('fs').cpSync('./src/content', './output/content', {recursive: true});require('fs').cpSync('./src/campaigns', './output/campaigns', {recursive: true});require('fs').cpSync('./src/index.html', './output/index.html');;require('fs').cpSync('./favicon.ico', './output/favicon.ico');\"",
    "dev": "pnpm run clean && pnpm run tsc-and-copy && concurrently \"npm run nodaemon-watch\" \"npm run dev-runserver\"",
    "nodaemon-watch": "cross-env PATH=$PATH nodemon --verbose --watch src --ext js,mjs,mts,ts,html --exec 'pnpm run tsc-and-copy'",
    "tsc-and-copy": "npx tsc -outDir output && pnpm run copy-content",
    "dev-runserver": "cross-env OUT_PATH=output node ./output/server/server.js"
  },
  "pkg": {
    "targets": [
      "node16-win-x64"
    ],
    "outputPath": "output"
  },
  "keywords": [
    "rpg",
    "game",
    "typescript"
  ],
  "author": "ThSiRi",
  "license": "CC BY-NC-SA 4.0",
  "devDependencies": {
    "@swc/core": "^1.10.7",
    "@types/node": "^18.11.18",
    "concurrently": "^9.1.2",
    "nodemon": "^3.1.9",
    "pkg": "^5.8.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@npmcli/config": "^10.0.0",
    "@npmcli/redact": "^3.0.0",
    "cross-env": "^7.0.3",
    "fs-minipass": "^3.0.3",
    "npm": "^10.4.0",
    "proc-log": "^5.0.0"
  },
  "tasks": [
    {
      "label": "npm: start-dev",
      "type": "npm",
      "script": "start-dev",
      "problemMatcher": [],
      "isBackground": true,
      "presentation": {
        "reveal": "never"
      },
      "group": {
        "kind": "build",
        "isDefault": true
      }
    }
  ],
  "packageManager": "pnpm@9.12.2+sha512.22721b3a11f81661ae1ec68ce1a7b879425a1ca5b991c975b074ac220b187ce56c708fe5db69f4c962c989452eee76c82877f4ee80f474cebd61ee13461b6228"
}
```

```
File: D:\Projects\Game Dev\my-rpg-project\pnpm-lock.yaml
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@npmcli/config':
        specifier: ^10.0.0
        version: 10.0.0
      '@npmcli/redact':
        specifier: ^3.0.0
        version: 3.0.0
      cross-env:
        specifier: ^7.0.3
        version: 7.0.3
      fs-minipass:
        specifier: ^3.0.3
        version: 3.0.3
      npm:
        specifier: ^10.4.0
        version: 10.9.2
      proc-log:
        specifier: ^5.0.0
        version: 5.0.0
    devDependencies:
      '@swc/core':
        specifier: ^1.10.7
        version: 1.10.7
      '@types/node':
        specifier: ^18.11.18
        version: 18.19.70
      concurrently:
        specifier: ^9.1.2
        version: 9.1.2
      nodemon:
        specifier: ^3.1.9
        version: 3.1.9
      pkg:
        specifier: ^5.8.1
        version: 5.8.1
      ts-node:
        specifier: ^10.9.2
        version: 10.9.2(@swc/core@1.10.7)(@types/node@18.19.70)(typescript@5.7.2)
      typescript:
        specifier: ^5.3.3
        version: 5.7.2

packages:

  '@babel/generator@7.18.2':
    resolution: {integrity: sha512-W1lG5vUwFvfMd8HVXqdfbuG7RuaSrTCCD8cl8fP8wOivdbtbIg2Db3IWUcgvfxKbbn6ZBGYRW/Zk1MIwK49mgw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.25.9':
    resolution: {integrity: sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.25.9':
    resolution: {integrity: sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.18.4':
    resolution: {integrity: sha512-FDge0dFazETFcxGw/EXzOkN8uJp0PC7Qbm+Pe9T+av2zlBpOgunFHkQPPn+eRuClU73JF+98D531UgayY89tow==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/types@7.19.0':
    resolution: {integrity: sha512-YuGopBq3ke25BVSiS6fgF49Ul9gH1x70Bcr6bqRLjWCkcX8Hre1/5+z+IiWOIerRMSSEfGZVB9z9kyq7wVs9YA==}
    engines: {node: '>=6.9.0'}

  '@cspotcode/source-map-support@0.8.1':
    resolution: {integrity: sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==}
    engines: {node: '>=12'}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@jridgewell/gen-mapping@0.3.8':
    resolution: {integrity: sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@jridgewell/trace-mapping@0.3.9':
    resolution: {integrity: sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@npmcli/config@10.0.0':
    resolution: {integrity: sha512-SXnVmSOQKfxouhrTV2sA2s6KV9v+nfLuddljCl5CtNS89AkVk5Bqkz8wqoqIzR6KjAGjiP1zXDZokqHR5kPYoQ==}
    engines: {node: ^20.17.0 || >=22.9.0}

  '@npmcli/git@6.0.1':
    resolution: {integrity: sha512-BBWMMxeQzalmKadyimwb2/VVQyJB01PH0HhVSNLHNBDZN/M/h/02P6f8fxedIiFhpMj11SO9Ep5tKTBE7zL2nw==}
    engines: {node: ^18.17.0 || >=20.5.0}

  '@npmcli/map-workspaces@4.0.2':
    resolution: {integrity: sha512-mnuMuibEbkaBTYj9HQ3dMe6L0ylYW+s/gfz7tBDMFY/la0w9Kf44P9aLn4/+/t3aTR3YUHKoT6XQL9rlicIe3Q==}
    engines: {node: ^18.17.0 || >=20.5.0}

  '@npmcli/name-from-folder@3.0.0':
    resolution: {integrity: sha512-61cDL8LUc9y80fXn+lir+iVt8IS0xHqEKwPu/5jCjxQTVoSCmkXvw4vbMrzAMtmghz3/AkiBjhHkDKUH+kf7kA==}
    engines: {node: ^18.17.0 || >=20.5.0}

  '@npmcli/package-json@6.1.0':
    resolution: {integrity: sha512-t6G+6ZInT4X+tqj2i+wlLIeCKnKOTuz9/VFYDtj+TGTur5q7sp/OYrQA19LdBbWfXDOi0Y4jtedV6xtB8zQ9ug==}
    engines: {node: ^18.17.0 || >=20.5.0}

  '@npmcli/promise-spawn@8.0.2':
    resolution: {integrity: sha512-/bNJhjc+o6qL+Dwz/bqfTQClkEO5nTQ1ZEcdCkAQjhkZMHIh22LPG7fNh1enJP1NKWDqYiiABnjFCY7E0zHYtQ==}
    engines: {node: ^18.17.0 || >=20.5.0}

  '@npmcli/redact@3.0.0':
    resolution: {integrity: sha512-/1uFzjVcfzqrgCeGW7+SZ4hv0qLWmKXVzFahZGJ6QuJBj6Myt9s17+JL86i76NV9YSnJRcGXJYQbAU0rn1YTCQ==}
    engines: {node: ^18.17.0 || >=20.5.0}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@swc/core-darwin-arm64@1.10.7':
    resolution: {integrity: sha512-SI0OFg987P6hcyT0Dbng3YRISPS9uhLX1dzW4qRrfqQdb0i75lPJ2YWe9CN47HBazrIA5COuTzrD2Dc0TcVsSQ==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [darwin]

  '@swc/core-darwin-x64@1.10.7':
    resolution: {integrity: sha512-RFIAmWVicD/l3RzxgHW0R/G1ya/6nyMspE2cAeDcTbjHi0I5qgdhBWd6ieXOaqwEwiCd0Mot1g2VZrLGoBLsjQ==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [darwin]

  '@swc/core-linux-arm-gnueabihf@1.10.7':
    resolution: {integrity: sha512-QP8vz7yELWfop5mM5foN6KkLylVO7ZUgWSF2cA0owwIaziactB2hCPZY5QU690coJouk9KmdFsPWDnaCFUP8tg==}
    engines: {node: '>=10'}
    cpu: [arm]
    os: [linux]

  '@swc/core-linux-arm64-gnu@1.10.7':
    resolution: {integrity: sha512-NgUDBGQcOeLNR+EOpmUvSDIP/F7i/OVOKxst4wOvT5FTxhnkWrW+StJGKj+DcUVSK5eWOYboSXr1y+Hlywwokw==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [linux]

  '@swc/core-linux-arm64-musl@1.10.7':
    resolution: {integrity: sha512-gp5Un3EbeSThBIh6oac5ZArV/CsSmTKj5jNuuUAuEsML3VF9vqPO+25VuxCvsRf/z3py+xOWRaN2HY/rjMeZog==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [linux]

  '@swc/core-linux-x64-gnu@1.10.7':
    resolution: {integrity: sha512-k/OxLLMl/edYqbZyUNg6/bqEHTXJT15l9WGqsl/2QaIGwWGvles8YjruQYQ9d4h/thSXLT9gd8bExU2D0N+bUA==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [linux]

  '@swc/core-linux-x64-musl@1.10.7':
    resolution: {integrity: sha512-XeDoURdWt/ybYmXLCEE8aSiTOzEn0o3Dx5l9hgt0IZEmTts7HgHHVeRgzGXbR4yDo0MfRuX5nE1dYpTmCz0uyA==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [linux]

  '@swc/core-win32-arm64-msvc@1.10.7':
    resolution: {integrity: sha512-nYAbi/uLS+CU0wFtBx8TquJw2uIMKBnl04LBmiVoFrsIhqSl+0MklaA9FVMGA35NcxSJfcm92Prl2W2LfSnTqQ==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [win32]

  '@swc/core-win32-ia32-msvc@1.10.7':
    resolution: {integrity: sha512-+aGAbsDsIxeLxw0IzyQLtvtAcI1ctlXVvVcXZMNXIXtTURM876yNrufRo4ngoXB3jnb1MLjIIjgXfFs/eZTUSw==}
    engines: {node: '>=10'}
    cpu: [ia32]
    os: [win32]

  '@swc/core-win32-x64-msvc@1.10.7':
    resolution: {integrity: sha512-TBf4clpDBjF/UUnkKrT0/th76/zwvudk5wwobiTFqDywMApHip5O0VpBgZ+4raY2TM8k5+ujoy7bfHb22zu17Q==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [win32]

  '@swc/core@1.10.7':
    resolution: {integrity: sha512-py91kjI1jV5D5W/Q+PurBdGsdU5TFbrzamP7zSCqLdMcHkKi3rQEM5jkQcZr0MXXSJTaayLxS3MWYTBIkzPDrg==}
    engines: {node: '>=10'}
    peerDependencies:
      '@swc/helpers': '*'
    peerDependenciesMeta:
      '@swc/helpers':
        optional: true

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/types@0.1.17':
    resolution: {integrity: sha512-V5gRru+aD8YVyCOMAjMpWR1Ui577DD5KSJsHP8RAxopAH22jFz6GZd/qxqjO6MJHQhcsjvjOFXyDhyLQUnMveQ==}

  '@tsconfig/node10@1.0.11':
    resolution: {integrity: sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==}

  '@tsconfig/node12@1.0.11':
    resolution: {integrity: sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==}

  '@tsconfig/node14@1.0.3':
    resolution: {integrity: sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==}

  '@tsconfig/node16@1.0.4':
    resolution: {integrity: sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==}

  '@types/node@18.19.70':
    resolution: {integrity: sha512-RE+K0+KZoEpDUbGGctnGdkrLFwi1eYKTlIHNl2Um98mUkGsm1u2Ff6Ltd0e8DktTtC98uy7rSj+hO8t/QuLoVQ==}

  abbrev@2.0.0:
    resolution: {integrity: sha512-6/mh1E2u2YgEsCHdY0Yx5oW+61gZU+1vXaoiHHrpKeuRNNgFvS+/jrwHiQhB5apAf5oB7UB7E19ol2R2LKH8hQ==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  acorn-walk@8.3.4:
    resolution: {integrity: sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==}
    engines: {node: '>=0.4.0'}

  acorn@8.14.0:
    resolution: {integrity: sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  agent-base@6.0.2:
    resolution: {integrity: sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==}
    engines: {node: '>= 6.0.0'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  arg@4.1.3:
    resolution: {integrity: sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  at-least-node@1.0.0:
    resolution: {integrity: sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==}
    engines: {node: '>= 4.0.0'}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  bl@4.1.0:
    resolution: {integrity: sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  buffer@5.7.1:
    resolution: {integrity: sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  chownr@1.1.4:
    resolution: {integrity: sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==}

  ci-info@4.1.0:
    resolution: {integrity: sha512-HutrvTNsF48wnxkzERIXOe5/mlcfFcbfCmwcg6CJnizbSue78AbDt+1cgl26zwn61WFxhcPykPfZrbqjGmBb4A==}
    engines: {node: '>=8'}

  cliui@7.0.4:
    resolution: {integrity: sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==}

  cliui@8.0.1:
    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
    engines: {node: '>=12'}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  concurrently@9.1.2:
    resolution: {integrity: sha512-H9MWcoPsYddwbOGM6difjVwVZHl63nwMEwDJG/L7VGtuaJhb12h2caPG2tVPWs7emuYix252iGfqOyrz1GczTQ==}
    engines: {node: '>=18'}
    hasBin: true

  core-util-is@1.0.3:
    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}

  create-require@1.1.1:
    resolution: {integrity: sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==}

  cross-env@7.0.3:
    resolution: {integrity: sha512-+/HKd6EgcQCJGh2PSjZuUitQBQynKor4wrFbRg4DtAgS1aWO+gU52xpH7M9ScGgXSYmAVS9bIJ8EzuaGw0oNAw==}
    engines: {node: '>=10.14', npm: '>=6', yarn: '>=1'}
    hasBin: true

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  debug@4.4.0:
    resolution: {integrity: sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decompress-response@6.0.0:
    resolution: {integrity: sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==}
    engines: {node: '>=10'}

  deep-extend@0.6.0:
    resolution: {integrity: sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==}
    engines: {node: '>=4.0.0'}

  detect-libc@2.0.3:
    resolution: {integrity: sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==}
    engines: {node: '>=8'}

  diff@4.0.2:
    resolution: {integrity: sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==}
    engines: {node: '>=0.3.1'}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  end-of-stream@1.4.4:
    resolution: {integrity: sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==}

  err-code@2.0.3:
    resolution: {integrity: sha512-2bmlRpNKBxT/CRmPOlyISQpNj+qSeYvcym/uT0Jx2bMOlKLtSy1ZmLuVxSEKKyor/N5yhvp/ZiG1oE3DEYMSFA==}

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  expand-template@2.0.3:
    resolution: {integrity: sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg==}
    engines: {node: '>=6'}

  fast-glob@3.3.3:
    resolution: {integrity: sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==}
    engines: {node: '>=8.6.0'}

  fastq@1.18.0:
    resolution: {integrity: sha512-QKHXPW0hD8g4UET03SdOdunzSouc9N4AuHdsX8XNcTsuz+yYFILVNIX4l9yHABMhiEI9Db0JTTIpu0wB+Y1QQw==}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  foreground-child@3.3.0:
    resolution: {integrity: sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==}
    engines: {node: '>=14'}

  from2@2.3.0:
    resolution: {integrity: sha512-OMcX/4IC/uqEPVgGeyfN22LJk6AZrMkRZHxcHBMBvHScDGgwTm2GT2Wkgtocyd3JfZffjj2kYUDXXII0Fk9W0g==}

  fs-constants@1.0.0:
    resolution: {integrity: sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==}

  fs-extra@9.1.0:
    resolution: {integrity: sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==}
    engines: {node: '>=10'}

  fs-minipass@3.0.3:
    resolution: {integrity: sha512-XUBA9XClHbnJWSfBzjkm6RvPsyg3sryZt06BEQoXcF7EK/xpGaQYJgQKDJSUH5SGZ76Y7pFx1QBnXz09rU5Fbw==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  get-caller-file@2.0.5:
    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
    engines: {node: 6.* || 8.* || >= 10.*}

  github-from-package@0.0.0:
    resolution: {integrity: sha512-SyHy3T1v2NUXn29OsWdxmK6RwHD+vkj3v8en8AOBZ1wBQ/hCAQ5bAQTD02kW4W9tUp/3Qh6J8r9EvntiyCmOOw==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  has-flag@3.0.0:
    resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}
    engines: {node: '>=4'}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has@1.0.4:
    resolution: {integrity: sha512-qdSAmqLF6209RFj4VVItywPMbm3vWylknmB3nvNiUIs72xAimcM8nVYxYr7ncvZq5qzk9MKIZR8ijqD/1QuYjQ==}
    engines: {node: '>= 0.4.0'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  hosted-git-info@8.0.2:
    resolution: {integrity: sha512-sYKnA7eGln5ov8T8gnYlkSOxFJvywzEx9BueN6xo/GKO8PGiI6uK6xx+DIGe45T3bdVjLAQDQW1aicT8z8JwQg==}
    engines: {node: ^18.17.0 || >=20.5.0}

  https-proxy-agent@5.0.1:
    resolution: {integrity: sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==}
    engines: {node: '>= 6'}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore-by-default@1.0.1:
    resolution: {integrity: sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  ini@1.3.8:
    resolution: {integrity: sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==}

  ini@5.0.0:
    resolution: {integrity: sha512-+N0ngpO3e7cRUWOJAS7qw0IZIVc6XPrW4MlFBdD066F2L4k1L6ker3hLqSq7iXxU5tgS4WGkIUElWn5vogAEnw==}
    engines: {node: ^18.17.0 || >=20.5.0}

  into-stream@6.0.0:
    resolution: {integrity: sha512-XHbaOAvP+uFKUFsOgoNPRjLkwB+I22JFPFe5OjTkQ0nwgj6+pSjb4NmB6VMxaPshLiOf+zcpOCBQuLwC1KHhZA==}
    engines: {node: '>=10'}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-core-module@2.16.1:
    resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}
    engines: {node: '>= 0.4'}

  is-core-module@2.9.0:
    resolution: {integrity: sha512-+5FPy5PnwmO3lvfMb0AsoPaBG+5KHUI0wYFXOtYPnVVVspTFUuMZNfNaNVRt3FZadstu2c8x23vykRW/NBoU6A==}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  isexe@3.1.1:
    resolution: {integrity: sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==}
    engines: {node: '>=16'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jsesc@2.5.2:
    resolution: {integrity: sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==}
    engines: {node: '>=4'}
    hasBin: true

  json-parse-even-better-errors@4.0.0:
    resolution: {integrity: sha512-lR4MXjGNgkJc7tkQ97kb2nuEMnNCyU//XYVH0MKTGcXEiSudQ5MKGKen3C5QubYy0vmq+JGitUg92uuywGEwIA==}
    engines: {node: ^18.17.0 || >=20.5.0}

  jsonfile@6.1.0:
    resolution: {integrity: sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  make-error@1.3.6:
    resolution: {integrity: sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mimic-response@3.1.0:
    resolution: {integrity: sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==}
    engines: {node: '>=10'}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  mkdirp-classic@0.5.3:
    resolution: {integrity: sha512-gKLcREMhtuZRwRAfqP3RFW+TK4JqApVBtOIftVgjuABpAtpxhPGaDcfvbhNvD0B8iD1oUr/txX35NjcaY6Ns/A==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  multistream@4.1.0:
    resolution: {integrity: sha512-J1XDiAmmNpRCBfIWJv+n0ymC4ABcf/Pl+5YvC5B/D2f/2+8PtHvCNxMPKiQcZyi922Hq69J2YOpb1pTywfifyw==}

  napi-build-utils@1.0.2:
    resolution: {integrity: sha512-ONmRUqK7zj7DWX0D9ADe03wbwOBZxNAfF20PlGfCWQcD3+/MakShIHrMqx9YwPTfxDdF1zLeL+RGZiR9kGMLdg==}

  node-abi@3.71.0:
    resolution: {integrity: sha512-SZ40vRiy/+wRTf21hxkkEjPJZpARzUMVcJoQse2EF8qkUWbbO2z7vd5oA/H6bVH6SZQ5STGcu0KRDS7biNRfxw==}
    engines: {node: '>=10'}

  node-fetch@2.7.0:
    resolution: {integrity: sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  nodemon@3.1.9:
    resolution: {integrity: sha512-hdr1oIb2p6ZSxu3PB2JWWYS7ZQ0qvaZsc3hK8DR8f02kRzc8rjYmxAIvdz+aYC+8F2IjNaB7HMcSDg8nQpJxyg==}
    engines: {node: '>=10'}
    hasBin: true

  nopt@8.0.0:
    resolution: {integrity: sha512-1L/fTJ4UmV/lUxT2Uf006pfZKTvAgCF+chz+0OgBHO8u2Z67pE7AaAUUj7CJy0lXqHmymUvGFt6NE9R3HER0yw==}
    engines: {node: ^18.17.0 || >=20.5.0}
    hasBin: true

  normalize-package-data@7.0.0:
    resolution: {integrity: sha512-k6U0gKRIuNCTkwHGZqblCfLfBRh+w1vI6tBo+IeJwq2M8FUiOqhX7GH+GArQGScA7azd1WfyRCvxoXDO3hQDIA==}
    engines: {node: ^18.17.0 || >=20.5.0}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  npm-install-checks@7.1.1:
    resolution: {integrity: sha512-u6DCwbow5ynAX5BdiHQ9qvexme4U3qHW3MWe5NqH+NeBm0LbiH6zvGjNNew1fY+AZZUtVHbOPF3j7mJxbUzpXg==}
    engines: {node: ^18.17.0 || >=20.5.0}

  npm-normalize-package-bin@4.0.0:
    resolution: {integrity: sha512-TZKxPvItzai9kN9H/TkmCtx/ZN/hvr3vUycjlfmH0ootY9yFBzNOpiXAdIn1Iteqsvk4lQn6B5PTrt+n6h8k/w==}
    engines: {node: ^18.17.0 || >=20.5.0}

  npm-package-arg@12.0.1:
    resolution: {integrity: sha512-aDxjFfPV3Liw0WOBWlyZLMBqtbgbg03rmGvHDJa2Ttv7tIz+1oB5qWec4psCDFZcZi9b5XdGkPdQiJxOPzvQRQ==}
    engines: {node: ^18.17.0 || >=20.5.0}

  npm-pick-manifest@10.0.0:
    resolution: {integrity: sha512-r4fFa4FqYY8xaM7fHecQ9Z2nE9hgNfJR+EmoKv0+chvzWkBcORX3r0FpTByP+CbOVJDladMXnPQGVN8PBLGuTQ==}
    engines: {node: ^18.17.0 || >=20.5.0}

  npm@10.9.2:
    resolution: {integrity: sha512-iriPEPIkoMYUy3F6f3wwSZAU93E0Eg6cHwIR6jzzOXWSy+SD/rOODEs74cVONHKSx2obXtuUoyidVEhISrisgQ==}
    engines: {node: ^18.17.0 || >=20.5.0}
    hasBin: true
    bundledDependencies:
      - '@isaacs/string-locale-compare'
      - '@npmcli/arborist'
      - '@npmcli/config'
      - '@npmcli/fs'
      - '@npmcli/map-workspaces'
      - '@npmcli/package-json'
      - '@npmcli/promise-spawn'
      - '@npmcli/redact'
      - '@npmcli/run-script'
      - '@sigstore/tuf'
      - abbrev
      - archy
      - cacache
      - chalk
      - ci-info
      - cli-columns
      - fastest-levenshtein
      - fs-minipass
      - glob
      - graceful-fs
      - hosted-git-info
      - ini
      - init-package-json
      - is-cidr
      - json-parse-even-better-errors
      - libnpmaccess
      - libnpmdiff
      - libnpmexec
      - libnpmfund
      - libnpmhook
      - libnpmorg
      - libnpmpack
      - libnpmpublish
      - libnpmsearch
      - libnpmteam
      - libnpmversion
      - make-fetch-happen
      - minimatch
      - minipass
      - minipass-pipeline
      - ms
      - node-gyp
      - nopt
      - normalize-package-data
      - npm-audit-report
      - npm-install-checks
      - npm-package-arg
      - npm-pick-manifest
      - npm-profile
      - npm-registry-fetch
      - npm-user-validate
      - p-map
      - pacote
      - parse-conflict-json
      - proc-log
      - qrcode-terminal
      - read
      - semver
      - spdx-expression-parse
      - ssri
      - supports-color
      - tar
      - text-table
      - tiny-relative-date
      - treeverse
      - validate-npm-package-name
      - which
      - write-file-atomic

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  p-is-promise@3.0.0:
    resolution: {integrity: sha512-Wo8VsW4IRQSKVXsJCn7TomUaVtyfjVDn3nUP7kE967BQk0CwFpdbZs0X0uk5sW9mkBa9eNM7hCMaG93WUAwxYQ==}
    engines: {node: '>=8'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  pkg-fetch@3.4.2:
    resolution: {integrity: sha512-0+uijmzYcnhC0hStDjm/cl2VYdrmVVBpe7Q8k9YBojxmR5tG8mvR9/nooQq3QSXiQqORDVOTY3XqMEqJVIzkHA==}
    hasBin: true

  pkg@5.8.1:
    resolution: {integrity: sha512-CjBWtFStCfIiT4Bde9QpJy0KeH19jCfwZRJqHFDFXfhUklCx8JoFmMj3wgnEYIwGmZVNkhsStPHEOnrtrQhEXA==}
    hasBin: true
    peerDependencies:
      node-notifier: '>=9.0.1'
    peerDependenciesMeta:
      node-notifier:
        optional: true

  prebuild-install@7.1.1:
    resolution: {integrity: sha512-jAXscXWMcCK8GgCoHOfIr0ODh5ai8mj63L2nWrjuAgXE6tDyYGnx4/8o/rCgU+B4JSyZBKbeZqzhtwtC3ovxjw==}
    engines: {node: '>=10'}
    hasBin: true

  proc-log@5.0.0:
    resolution: {integrity: sha512-Azwzvl90HaF0aCz1JrDdXQykFakSSNPaPoiZ9fm5qJIMHioDZEi7OAdRwSm6rSoPtY3Qutnm3L7ogmg3dc+wbQ==}
    engines: {node: ^18.17.0 || >=20.5.0}

  process-nextick-args@2.0.1:
    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}

  progress@2.0.3:
    resolution: {integrity: sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==}
    engines: {node: '>=0.4.0'}

  promise-inflight@1.0.1:
    resolution: {integrity: sha512-6zWPyEOFaQBJYcGMHBKTKJ3u6TBsnMFOIZSa6ce1e/ZrrsOlnHRHbabMjLiBYKp+n44X9eUI6VUPaukCXHuG4g==}
    peerDependencies:
      bluebird: '*'
    peerDependenciesMeta:
      bluebird:
        optional: true

  promise-retry@2.0.1:
    resolution: {integrity: sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==}
    engines: {node: '>=10'}

  pstree.remy@1.1.8:
    resolution: {integrity: sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==}

  pump@3.0.2:
    resolution: {integrity: sha512-tUPXtzlGM8FE3P0ZL6DVs/3P58k9nk8/jZeQCurTJylQA8qFYzHFfhBJkuqyE0FifOsQ0uKWekiZ5g8wtr28cw==}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  rc@1.2.8:
    resolution: {integrity: sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==}
    hasBin: true

  readable-stream@2.3.8:
    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  require-directory@2.1.1:
    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
    engines: {node: '>=0.10.0'}

  resolve@1.22.10:
    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
    engines: {node: '>= 0.4'}
    hasBin: true

  retry@0.12.0:
    resolution: {integrity: sha512-9LkiTwjUh6rT555DtE9rTX+BKByPfrMzEAtnlEtdEwr3Nkffwiihqe2bWADg+OQRjt9gl6ICdmB/ZFDCGAtSow==}
    engines: {node: '>= 4'}

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  rxjs@7.8.1:
    resolution: {integrity: sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==}

  safe-buffer@5.1.2:
    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  semver@7.6.3:
    resolution: {integrity: sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==}
    engines: {node: '>=10'}
    hasBin: true

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  shell-quote@1.8.2:
    resolution: {integrity: sha512-AzqKpGKjrj7EM6rKVQEPpB288oCfnrEIuyoT9cyF4nmGa7V8Zk6f7RRqYisX8X9m+Q7bd632aZW4ky7EhbQztA==}
    engines: {node: '>= 0.4'}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  simple-concat@1.0.1:
    resolution: {integrity: sha512-cSFtAPtRhljv69IK0hTVZQ+OfE9nePi/rtJmw5UjHeVyVroEqJXP1sFztKUy1qU+xvz3u/sfYJLa947b7nAN2Q==}

  simple-get@4.0.1:
    resolution: {integrity: sha512-brv7p5WgH0jmQJr1ZDDfKDOSeWWg+OVypG99A/5vYGPqJ6pxiaHLy8nxtFjBA7oMa01ebA9gfh1uMCFqOuXxvA==}

  simple-update-notifier@2.0.0:
    resolution: {integrity: sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==}
    engines: {node: '>=10'}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  spdx-correct@3.2.0:
    resolution: {integrity: sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==}

  spdx-exceptions@2.5.0:
    resolution: {integrity: sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w==}

  spdx-expression-parse@3.0.1:
    resolution: {integrity: sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==}

  spdx-license-ids@3.0.20:
    resolution: {integrity: sha512-jg25NiDV/1fLtSgEgyvVyDunvaNHbuwF9lfNV17gSmPFAlYzdfNBlLtLzXTevwkPj7DhGbmN9VnmJIgLnhvaBw==}

  stream-meter@1.0.4:
    resolution: {integrity: sha512-4sOEtrbgFotXwnEuzzsQBYEV1elAeFSO8rSGeTwabuX1RRn/kEq9JVH7I0MRBhKVRR0sJkr0M0QCH7yOLf9fhQ==}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string_decoder@1.1.1:
    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-json-comments@2.0.1:
    resolution: {integrity: sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==}
    engines: {node: '>=0.10.0'}

  supports-color@5.5.0:
    resolution: {integrity: sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==}
    engines: {node: '>=4'}

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  tar-fs@2.1.1:
    resolution: {integrity: sha512-V0r2Y9scmbDRLCNex/+hYzvp/zyYjvFbHPNgVTKfQvVrb6guiE/fxP+XblDNR011utopbkex2nM4dHNV6GDsng==}

  tar-stream@2.2.0:
    resolution: {integrity: sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==}
    engines: {node: '>=6'}

  to-fast-properties@2.0.0:
    resolution: {integrity: sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==}
    engines: {node: '>=4'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  touch@3.1.1:
    resolution: {integrity: sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==}
    hasBin: true

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  tree-kill@1.2.2:
    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}
    hasBin: true

  ts-node@10.9.2:
    resolution: {integrity: sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==}
    hasBin: true
    peerDependencies:
      '@swc/core': '>=1.2.50'
      '@swc/wasm': '>=1.2.50'
      '@types/node': '*'
      typescript: '>=2.7'
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      '@swc/wasm':
        optional: true

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  tunnel-agent@0.6.0:
    resolution: {integrity: sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==}

  typescript@5.7.2:
    resolution: {integrity: sha512-i5t66RHxDvVN40HfDd1PsEThGNnlMCMT3jMUuoh9/0TaqWevNontacunWyN02LA9/fIbEWlcHZcgTKb9QoaLfg==}
    engines: {node: '>=14.17'}
    hasBin: true

  undefsafe@2.0.5:
    resolution: {integrity: sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==}

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  universalify@2.0.1:
    resolution: {integrity: sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==}
    engines: {node: '>= 10.0.0'}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  v8-compile-cache-lib@3.0.1:
    resolution: {integrity: sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==}

  validate-npm-package-license@3.0.4:
    resolution: {integrity: sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==}

  validate-npm-package-name@6.0.0:
    resolution: {integrity: sha512-d7KLgL1LD3U3fgnvWEY1cQXoO/q6EQ1BSz48Sa149V/5zVTAbgmZIpyI8TRi6U9/JNyeYLlTKsEMPtLC27RFUg==}
    engines: {node: ^18.17.0 || >=20.5.0}

  walk-up-path@4.0.0:
    resolution: {integrity: sha512-3hu+tD8YzSLGuFYtPRb48vdhKMi0KQV5sn+uWr8+7dMEq/2G/dtLrdDinkLjqq5TIbIBjYJ4Ax/n3YiaW7QM8A==}
    engines: {node: 20 || >=22}

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  which@5.0.0:
    resolution: {integrity: sha512-JEdGzHwwkrbWoGOlIHqQ5gtprKGOenpDHpxE9zVR1bWbOtYRyPPHMe9FaP6x61CmNaTThSkb0DAJte5jD+DmzQ==}
    engines: {node: ^18.17.0 || >=20.5.0}
    hasBin: true

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  y18n@5.0.8:
    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
    engines: {node: '>=10'}

  yargs-parser@20.2.9:
    resolution: {integrity: sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==}
    engines: {node: '>=10'}

  yargs-parser@21.1.1:
    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
    engines: {node: '>=12'}

  yargs@16.2.0:
    resolution: {integrity: sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==}
    engines: {node: '>=10'}

  yargs@17.7.2:
    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
    engines: {node: '>=12'}

  yn@3.1.1:
    resolution: {integrity: sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==}
    engines: {node: '>=6'}

snapshots:

  '@babel/generator@7.18.2':
    dependencies:
      '@babel/types': 7.19.0
      '@jridgewell/gen-mapping': 0.3.8
      jsesc: 2.5.2

  '@babel/helper-string-parser@7.25.9': {}

  '@babel/helper-validator-identifier@7.25.9': {}

  '@babel/parser@7.18.4':
    dependencies:
      '@babel/types': 7.19.0

  '@babel/types@7.19.0':
    dependencies:
      '@babel/helper-string-parser': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9
      to-fast-properties: 2.0.0

  '@cspotcode/source-map-support@0.8.1':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.9

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@jridgewell/gen-mapping@0.3.8':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@jridgewell/trace-mapping@0.3.9':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.18.0

  '@npmcli/config@10.0.0':
    dependencies:
      '@npmcli/map-workspaces': 4.0.2
      '@npmcli/package-json': 6.1.0
      ci-info: 4.1.0
      ini: 5.0.0
      nopt: 8.0.0
      proc-log: 5.0.0
      semver: 7.6.3
      walk-up-path: 4.0.0
    transitivePeerDependencies:
      - bluebird

  '@npmcli/git@6.0.1':
    dependencies:
      '@npmcli/promise-spawn': 8.0.2
      ini: 5.0.0
      lru-cache: 10.4.3
      npm-pick-manifest: 10.0.0
      proc-log: 5.0.0
      promise-inflight: 1.0.1
      promise-retry: 2.0.1
      semver: 7.6.3
      which: 5.0.0
    transitivePeerDependencies:
      - bluebird

  '@npmcli/map-workspaces@4.0.2':
    dependencies:
      '@npmcli/name-from-folder': 3.0.0
      '@npmcli/package-json': 6.1.0
      glob: 10.4.5
      minimatch: 9.0.5
    transitivePeerDependencies:
      - bluebird

  '@npmcli/name-from-folder@3.0.0': {}

  '@npmcli/package-json@6.1.0':
    dependencies:
      '@npmcli/git': 6.0.1
      glob: 10.4.5
      hosted-git-info: 8.0.2
      json-parse-even-better-errors: 4.0.0
      normalize-package-data: 7.0.0
      proc-log: 5.0.0
      semver: 7.6.3
    transitivePeerDependencies:
      - bluebird

  '@npmcli/promise-spawn@8.0.2':
    dependencies:
      which: 5.0.0

  '@npmcli/redact@3.0.0': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@swc/core-darwin-arm64@1.10.7':
    optional: true

  '@swc/core-darwin-x64@1.10.7':
    optional: true

  '@swc/core-linux-arm-gnueabihf@1.10.7':
    optional: true

  '@swc/core-linux-arm64-gnu@1.10.7':
    optional: true

  '@swc/core-linux-arm64-musl@1.10.7':
    optional: true

  '@swc/core-linux-x64-gnu@1.10.7':
    optional: true

  '@swc/core-linux-x64-musl@1.10.7':
    optional: true

  '@swc/core-win32-arm64-msvc@1.10.7':
    optional: true

  '@swc/core-win32-ia32-msvc@1.10.7':
    optional: true

  '@swc/core-win32-x64-msvc@1.10.7':
    optional: true

  '@swc/core@1.10.7':
    dependencies:
      '@swc/counter': 0.1.3
      '@swc/types': 0.1.17
    optionalDependencies:
      '@swc/core-darwin-arm64': 1.10.7
      '@swc/core-darwin-x64': 1.10.7
      '@swc/core-linux-arm-gnueabihf': 1.10.7
      '@swc/core-linux-arm64-gnu': 1.10.7
      '@swc/core-linux-arm64-musl': 1.10.7
      '@swc/core-linux-x64-gnu': 1.10.7
      '@swc/core-linux-x64-musl': 1.10.7
      '@swc/core-win32-arm64-msvc': 1.10.7
      '@swc/core-win32-ia32-msvc': 1.10.7
      '@swc/core-win32-x64-msvc': 1.10.7

  '@swc/counter@0.1.3': {}

  '@swc/types@0.1.17':
    dependencies:
      '@swc/counter': 0.1.3

  '@tsconfig/node10@1.0.11': {}

  '@tsconfig/node12@1.0.11': {}

  '@tsconfig/node14@1.0.3': {}

  '@tsconfig/node16@1.0.4': {}

  '@types/node@18.19.70':
    dependencies:
      undici-types: 5.26.5

  abbrev@2.0.0: {}

  acorn-walk@8.3.4:
    dependencies:
      acorn: 8.14.0

  acorn@8.14.0: {}

  agent-base@6.0.2:
    dependencies:
      debug: 4.4.0(supports-color@5.5.0)
    transitivePeerDependencies:
      - supports-color

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@6.2.1: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  arg@4.1.3: {}

  array-union@2.1.0: {}

  at-least-node@1.0.0: {}

  balanced-match@1.0.2: {}

  base64-js@1.5.1: {}

  binary-extensions@2.3.0: {}

  bl@4.1.0:
    dependencies:
      buffer: 5.7.1
      inherits: 2.0.4
      readable-stream: 3.6.2

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  buffer@5.7.1:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  chownr@1.1.4: {}

  ci-info@4.1.0: {}

  cliui@7.0.4:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  cliui@8.0.1:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  concat-map@0.0.1: {}

  concurrently@9.1.2:
    dependencies:
      chalk: 4.1.2
      lodash: 4.17.21
      rxjs: 7.8.1
      shell-quote: 1.8.2
      supports-color: 8.1.1
      tree-kill: 1.2.2
      yargs: 17.7.2

  core-util-is@1.0.3: {}

  create-require@1.1.1: {}

  cross-env@7.0.3:
    dependencies:
      cross-spawn: 7.0.6

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  debug@4.4.0(supports-color@5.5.0):
    dependencies:
      ms: 2.1.3
    optionalDependencies:
      supports-color: 5.5.0

  decompress-response@6.0.0:
    dependencies:
      mimic-response: 3.1.0

  deep-extend@0.6.0: {}

  detect-libc@2.0.3: {}

  diff@4.0.2: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  eastasianwidth@0.2.0: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  end-of-stream@1.4.4:
    dependencies:
      once: 1.4.0

  err-code@2.0.3: {}

  escalade@3.2.0: {}

  expand-template@2.0.3: {}

  fast-glob@3.3.3:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fastq@1.18.0:
    dependencies:
      reusify: 1.0.4

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  foreground-child@3.3.0:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  from2@2.3.0:
    dependencies:
      inherits: 2.0.4
      readable-stream: 2.3.8

  fs-constants@1.0.0: {}

  fs-extra@9.1.0:
    dependencies:
      at-least-node: 1.0.0
      graceful-fs: 4.2.11
      jsonfile: 6.1.0
      universalify: 2.0.1

  fs-minipass@3.0.3:
    dependencies:
      minipass: 7.1.2

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  get-caller-file@2.0.5: {}

  github-from-package@0.0.0: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.0
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.3
      ignore: 5.3.2
      merge2: 1.4.1
      slash: 3.0.0

  graceful-fs@4.2.11: {}

  has-flag@3.0.0: {}

  has-flag@4.0.0: {}

  has@1.0.4: {}

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  hosted-git-info@8.0.2:
    dependencies:
      lru-cache: 10.4.3

  https-proxy-agent@5.0.1:
    dependencies:
      agent-base: 6.0.2
      debug: 4.4.0(supports-color@5.5.0)
    transitivePeerDependencies:
      - supports-color

  ieee754@1.2.1: {}

  ignore-by-default@1.0.1: {}

  ignore@5.3.2: {}

  inherits@2.0.4: {}

  ini@1.3.8: {}

  ini@5.0.0: {}

  into-stream@6.0.0:
    dependencies:
      from2: 2.3.0
      p-is-promise: 3.0.0

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-core-module@2.16.1:
    dependencies:
      hasown: 2.0.2

  is-core-module@2.9.0:
    dependencies:
      has: 1.0.4

  is-extglob@2.1.1: {}

  is-fullwidth-code-point@3.0.0: {}

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-number@7.0.0: {}

  isarray@1.0.0: {}

  isexe@2.0.0: {}

  isexe@3.1.1: {}

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jsesc@2.5.2: {}

  json-parse-even-better-errors@4.0.0: {}

  jsonfile@6.1.0:
    dependencies:
      universalify: 2.0.1
    optionalDependencies:
      graceful-fs: 4.2.11

  lodash@4.17.21: {}

  lru-cache@10.4.3: {}

  make-error@1.3.6: {}

  merge2@1.4.1: {}

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mimic-response@3.1.0: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  mkdirp-classic@0.5.3: {}

  ms@2.1.3: {}

  multistream@4.1.0:
    dependencies:
      once: 1.4.0
      readable-stream: 3.6.2

  napi-build-utils@1.0.2: {}

  node-abi@3.71.0:
    dependencies:
      semver: 7.6.3

  node-fetch@2.7.0:
    dependencies:
      whatwg-url: 5.0.0

  nodemon@3.1.9:
    dependencies:
      chokidar: 3.6.0
      debug: 4.4.0(supports-color@5.5.0)
      ignore-by-default: 1.0.1
      minimatch: 3.1.2
      pstree.remy: 1.1.8
      semver: 7.6.3
      simple-update-notifier: 2.0.0
      supports-color: 5.5.0
      touch: 3.1.1
      undefsafe: 2.0.5

  nopt@8.0.0:
    dependencies:
      abbrev: 2.0.0

  normalize-package-data@7.0.0:
    dependencies:
      hosted-git-info: 8.0.2
      semver: 7.6.3
      validate-npm-package-license: 3.0.4

  normalize-path@3.0.0: {}

  npm-install-checks@7.1.1:
    dependencies:
      semver: 7.6.3

  npm-normalize-package-bin@4.0.0: {}

  npm-package-arg@12.0.1:
    dependencies:
      hosted-git-info: 8.0.2
      proc-log: 5.0.0
      semver: 7.6.3
      validate-npm-package-name: 6.0.0

  npm-pick-manifest@10.0.0:
    dependencies:
      npm-install-checks: 7.1.1
      npm-normalize-package-bin: 4.0.0
      npm-package-arg: 12.0.1
      semver: 7.6.3

  npm@10.9.2: {}

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  p-is-promise@3.0.0: {}

  package-json-from-dist@1.0.1: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-type@4.0.0: {}

  picomatch@2.3.1: {}

  pkg-fetch@3.4.2:
    dependencies:
      chalk: 4.1.2
      fs-extra: 9.1.0
      https-proxy-agent: 5.0.1
      node-fetch: 2.7.0
      progress: 2.0.3
      semver: 7.6.3
      tar-fs: 2.1.1
      yargs: 16.2.0
    transitivePeerDependencies:
      - encoding
      - supports-color

  pkg@5.8.1:
    dependencies:
      '@babel/generator': 7.18.2
      '@babel/parser': 7.18.4
      '@babel/types': 7.19.0
      chalk: 4.1.2
      fs-extra: 9.1.0
      globby: 11.1.0
      into-stream: 6.0.0
      is-core-module: 2.9.0
      minimist: 1.2.8
      multistream: 4.1.0
      pkg-fetch: 3.4.2
      prebuild-install: 7.1.1
      resolve: 1.22.10
      stream-meter: 1.0.4
    transitivePeerDependencies:
      - encoding
      - supports-color

  prebuild-install@7.1.1:
    dependencies:
      detect-libc: 2.0.3
      expand-template: 2.0.3
      github-from-package: 0.0.0
      minimist: 1.2.8
      mkdirp-classic: 0.5.3
      napi-build-utils: 1.0.2
      node-abi: 3.71.0
      pump: 3.0.2
      rc: 1.2.8
      simple-get: 4.0.1
      tar-fs: 2.1.1
      tunnel-agent: 0.6.0

  proc-log@5.0.0: {}

  process-nextick-args@2.0.1: {}

  progress@2.0.3: {}

  promise-inflight@1.0.1: {}

  promise-retry@2.0.1:
    dependencies:
      err-code: 2.0.3
      retry: 0.12.0

  pstree.remy@1.1.8: {}

  pump@3.0.2:
    dependencies:
      end-of-stream: 1.4.4
      once: 1.4.0

  queue-microtask@1.2.3: {}

  rc@1.2.8:
    dependencies:
      deep-extend: 0.6.0
      ini: 1.3.8
      minimist: 1.2.8
      strip-json-comments: 2.0.1

  readable-stream@2.3.8:
    dependencies:
      core-util-is: 1.0.3
      inherits: 2.0.4
      isarray: 1.0.0
      process-nextick-args: 2.0.1
      safe-buffer: 5.1.2
      string_decoder: 1.1.1
      util-deprecate: 1.0.2

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  require-directory@2.1.1: {}

  resolve@1.22.10:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  retry@0.12.0: {}

  reusify@1.0.4: {}

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  rxjs@7.8.1:
    dependencies:
      tslib: 2.8.1

  safe-buffer@5.1.2: {}

  safe-buffer@5.2.1: {}

  semver@7.6.3: {}

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  shell-quote@1.8.2: {}

  signal-exit@4.1.0: {}

  simple-concat@1.0.1: {}

  simple-get@4.0.1:
    dependencies:
      decompress-response: 6.0.0
      once: 1.4.0
      simple-concat: 1.0.1

  simple-update-notifier@2.0.0:
    dependencies:
      semver: 7.6.3

  slash@3.0.0: {}

  spdx-correct@3.2.0:
    dependencies:
      spdx-expression-parse: 3.0.1
      spdx-license-ids: 3.0.20

  spdx-exceptions@2.5.0: {}

  spdx-expression-parse@3.0.1:
    dependencies:
      spdx-exceptions: 2.5.0
      spdx-license-ids: 3.0.20

  spdx-license-ids@3.0.20: {}

  stream-meter@1.0.4:
    dependencies:
      readable-stream: 2.3.8

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string_decoder@1.1.1:
    dependencies:
      safe-buffer: 5.1.2

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-json-comments@2.0.1: {}

  supports-color@5.5.0:
    dependencies:
      has-flag: 3.0.0

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  tar-fs@2.1.1:
    dependencies:
      chownr: 1.1.4
      mkdirp-classic: 0.5.3
      pump: 3.0.2
      tar-stream: 2.2.0

  tar-stream@2.2.0:
    dependencies:
      bl: 4.1.0
      end-of-stream: 1.4.4
      fs-constants: 1.0.0
      inherits: 2.0.4
      readable-stream: 3.6.2

  to-fast-properties@2.0.0: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  touch@3.1.1: {}

  tr46@0.0.3: {}

  tree-kill@1.2.2: {}

  ts-node@10.9.2(@swc/core@1.10.7)(@types/node@18.19.70)(typescript@5.7.2):
    dependencies:
      '@cspotcode/source-map-support': 0.8.1
      '@tsconfig/node10': 1.0.11
      '@tsconfig/node12': 1.0.11
      '@tsconfig/node14': 1.0.3
      '@tsconfig/node16': 1.0.4
      '@types/node': 18.19.70
      acorn: 8.14.0
      acorn-walk: 8.3.4
      arg: 4.1.3
      create-require: 1.1.1
      diff: 4.0.2
      make-error: 1.3.6
      typescript: 5.7.2
      v8-compile-cache-lib: 3.0.1
      yn: 3.1.1
    optionalDependencies:
      '@swc/core': 1.10.7

  tslib@2.8.1: {}

  tunnel-agent@0.6.0:
    dependencies:
      safe-buffer: 5.2.1

  typescript@5.7.2: {}

  undefsafe@2.0.5: {}

  undici-types@5.26.5: {}

  universalify@2.0.1: {}

  util-deprecate@1.0.2: {}

  v8-compile-cache-lib@3.0.1: {}

  validate-npm-package-license@3.0.4:
    dependencies:
      spdx-correct: 3.2.0
      spdx-expression-parse: 3.0.1

  validate-npm-package-name@6.0.0: {}

  walk-up-path@4.0.0: {}

  webidl-conversions@3.0.1: {}

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  which@5.0.0:
    dependencies:
      isexe: 3.1.1

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  y18n@5.0.8: {}

  yargs-parser@20.2.9: {}

  yargs-parser@21.1.1: {}

  yargs@16.2.0:
    dependencies:
      cliui: 7.0.4
      escalade: 3.2.0
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 20.2.9

  yargs@17.7.2:
    dependencies:
      cliui: 8.0.1
      escalade: 3.2.0
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 21.1.1

  yn@3.1.1: {}
```

```
File: D:\Projects\Game Dev\my-rpg-project\tsconfig.json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "CommonJS",
    "lib": [
      "ES6",
      "dom"
    ],
    "sourceMap": true,
    "strict": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": false,
    "forceConsistentCasingInFileNames": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "noEmit": false,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "strictNullChecks": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "baseUrl": ".",
    "paths": {
      "*": [
        ".src/*"
      ]
    },
    "outDir": "./output", //  The output path is now placed within `output`, and this is correct because `pkg` also uses this for its builds, and its path generation
    "rootDir": "./src", //  Root for our scripts/images
  },
  "ts-node": {
    "swc": true
  },
  "include": [
    "src/**/*" // Where Typescript source code resides
  ],
  "exclude": [
    "src/test/**/*" // Typescript is excluded here to avoid unwanted Javascript output and to prevent the system from considering tests when creating an output using pkg or any kind of compilation
  ]
}
```


